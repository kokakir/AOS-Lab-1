; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?name_type@@3PADA				; name_type
PUBLIC	?name_operator@@3PADA				; name_operator
PUBLIC	?time_standart@@3PANA				; time_standart
PUBLIC	?empty_time@@3NA				; empty_time
PUBLIC	?ad_time@@3PA_KA				; ad_time
PUBLIC	?a1@@3HA					; a1
PUBLIC	?a2@@3HA					; a2
PUBLIC	?a3@@3HA					; a3
PUBLIC	?a4@@3HA					; a4
PUBLIC	?a5@@3HA					; a5
PUBLIC	?a6@@3HA					; a6
PUBLIC	?a7@@3HA					; a7
PUBLIC	?a8@@3HA					; a8
PUBLIC	?a9@@3HA					; a9
PUBLIC	?a10@@3HA					; a10
PUBLIC	?b1@@3NA					; b1
PUBLIC	?b2@@3NA					; b2
PUBLIC	?b3@@3NA					; b3
PUBLIC	?b4@@3NA					; b4
PUBLIC	?b5@@3NA					; b5
PUBLIC	?b6@@3NA					; b6
PUBLIC	?b7@@3NA					; b7
PUBLIC	?b8@@3NA					; b8
PUBLIC	?b9@@3NA					; b9
PUBLIC	?b10@@3NA					; b10
PUBLIC	?c1@@3JA					; c1
PUBLIC	?c2@@3JA					; c2
PUBLIC	?c3@@3JA					; c3
PUBLIC	?c4@@3JA					; c4
PUBLIC	?c5@@3JA					; c5
PUBLIC	?c6@@3JA					; c6
PUBLIC	?c7@@3JA					; c7
PUBLIC	?c8@@3JA					; c8
PUBLIC	?c9@@3JA					; c9
PUBLIC	?c10@@3JA					; c10
PUBLIC	?d1@@3MA					; d1
PUBLIC	?d2@@3MA					; d2
PUBLIC	?d3@@3MA					; d3
PUBLIC	?d4@@3MA					; d4
PUBLIC	?d5@@3MA					; d5
PUBLIC	?d6@@3MA					; d6
PUBLIC	?d7@@3MA					; d7
PUBLIC	?d8@@3MA					; d8
PUBLIC	?d9@@3MA					; d9
PUBLIC	?d10@@3MA					; d10
PUBLIC	?e1@@3DA					; e1
PUBLIC	?e2@@3DA					; e2
PUBLIC	?e3@@3DA					; e3
PUBLIC	?e4@@3DA					; e4
PUBLIC	?e5@@3DA					; e5
PUBLIC	?e6@@3DA					; e6
PUBLIC	?e7@@3DA					; e7
PUBLIC	?e8@@3DA					; e8
PUBLIC	?e9@@3DA					; e9
PUBLIC	?e10@@3DA					; e10
PUBLIC	?tick_per_second@@3KA				; tick_per_second
_BSS	SEGMENT
?time_standart@@3PANA DQ 019H DUP (?)			; time_standart
?empty_time@@3NA DQ 01H DUP (?)				; empty_time
?ad_time@@3PA_KA DQ 019H DUP (?)			; ad_time
?tick_per_second@@3KA DD 01H DUP (?)			; tick_per_second
_BSS	ENDS
msvcjmc	SEGMENT
__8906660C_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__F8119FB4_cstdlib DB 01H
__0A4FAB91_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__85A9AA98_type_traits DB 01H
__4324C6B3_xutility DB 01H
__B0C4CEA9_malloc@h DB 01H
__E75714E4_vcruntime_exception@h DB 01H
__E4152856_exception DB 01H
__F2870A2C_limits DB 01H
__A58979FC_xmemory DB 01H
__D15AFF60_xstring DB 01H
__6D5B120B_stdexcept DB 01H
__160863A3_xcall_once@h DB 01H
__99B256EE_atomic DB 01H
__A9557183_system_error DB 01H
__FB364CBD_vcruntime_typeinfo@h DB 01H
__33FB35AA_typeinfo DB 01H
__4E2906A2_memory DB 01H
__626C51AD_xfacet DB 01H
__7242C389_ctype@h DB 01H
__2C72D662_xlocinfo DB 01H
__0E648B51_xlocale DB 01H
__1597A171_xiosbase DB 01H
__90E3ED46_xlocnum DB 01H
__165C22CB_ios DB 01H
__8AA3BE86_time@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__A639F09B_labAOS@cpp DB 01H
__7EA464AF_istream DB 01H
__1D745195_ostream DB 01H
__6FFBAAB7_streambuf DB 01H
__528871F3_iterator DB 01H
__3E6EDFAA_iosfwd DB 01H
__CF1C1A3F_utility DB 01H
__38038D2D_xstddef DB 01H
__EE19A480_xatomic@h DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?name_type@@3PADA DB 'idlfcidlfcidlfcidlfcidlfc', 00H	; name_type
?e1@@3DA DB	016H					; e1
?e2@@3DA DB	04cH					; e2
?name_operator@@3PADA DB '+++++-----*****/////=====', 00H ; name_operator
?e3@@3DA DB	01bH					; e3
?e4@@3DA DB	0dH					; e4
?a1@@3HA DD	017H					; a1
?a2@@3HA DD	01aH					; a2
?a3@@3HA DD	01bH					; a3
?a4@@3HA DD	052H					; a4
?a5@@3HA DD	01dH					; a5
?a6@@3HA DD	059H					; a6
?a7@@3HA DD	0cH					; a7
?a8@@3HA DD	05aH					; a8
?a9@@3HA DD	020H					; a9
?a10@@3HA DD	038H					; a10
?b1@@3NA DQ	0403799999999999ar		; 23.6	; b1
?b2@@3NA DQ	0403ab33333333333r		; 26.7	; b2
?b3@@3NA DQ	0403b4ccccccccccdr		; 27.3	; b3
?b4@@3NA DQ	0405495c28f5c28f6r		; 82.34	; b4
?b5@@3NA DQ	040378f5c28f5c28fr		; 23.56	; b5
?b6@@3NA DQ	040565ccccccccccdr		; 89.45	; b6
?b7@@3NA DQ	04028bd70a3d70a3dr		; 12.37	; b7
?b8@@3NA DQ	04056b28f5c28f5c3r		; 90.79	; b8
?b9@@3NA DQ	040401d70a3d70a3dr		; 32.23	; b9
?b10@@3NA DQ	0404c3ae147ae147br		; 56.46	; b10
?c1@@3JA DD	019H					; c1
?c2@@3JA DD	04eH					; c2
?c3@@3JA DD	017H					; c3
?c4@@3JA DD	0cH					; c4
?c5@@3JA DD	04eH					; c5
?c6@@3JA DD	02dH					; c6
?c7@@3JA DD	03aH					; c7
?c8@@3JA DD	022H					; c8
?c9@@3JA DD	04fH					; c9
?c10@@3JA DD	038H					; c10
?d1@@3MA DD	041b4cccdr			; 22.6	; d1
?d2@@3MA DD	041cd999ar			; 25.7	; d2
?d3@@3MA DD	041e26666r			; 28.3	; d3
?d4@@3MA DD	042aaae14r			; 85.34	; d4
?d5@@3MA DD	041dc7ae1r			; 27.56	; d5
?d6@@3MA DD	042aae666r			; 85.45	; d6
?d7@@3MA DD	04182f5c3r			; 16.37	; d7
?d8@@3MA DD	042bd947br			; 94.79	; d8
?d9@@3MA DD	04218eb85r			; 38.23	; d9
?d10@@3MA DD	0425dd70ar			; 55.46	; d10
?e5@@3DA DB	046H					; e5
?e6@@3DA DB	02fH					; e6
?e7@@3DA DB	036H					; e7
?e8@@3DA DB	027H					; e8
?e9@@3DA DB	049H					; e9
?e10@@3DA DB	036H					; e10
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?wait_clock_update@@YAJXZ			; wait_clock_update
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?plus_for_int@@YA_KHHHHHHHHHH@Z			; plus_for_int
PUBLIC	?plus_for_double@@YAHNNNNNNNNNN@Z		; plus_for_double
PUBLIC	?plus_for_long@@YAHJJJJJJJJJJ@Z			; plus_for_long
PUBLIC	?plus_for_float@@YAHMMMMMMMMMM@Z		; plus_for_float
PUBLIC	?plus_for_char@@YAHDDDDDDDDDD@Z			; plus_for_char
PUBLIC	?minus_for_int@@YAHHHHHHHHHHH@Z			; minus_for_int
PUBLIC	?minus_for_double@@YAHNNNNNNNNNN@Z		; minus_for_double
PUBLIC	?minus_for_long@@YAHJJJJJJJJJJ@Z		; minus_for_long
PUBLIC	?minus_for_float@@YAHMMMMMMMMMM@Z		; minus_for_float
PUBLIC	?minus_for_char@@YAHDDDDDDDDDD@Z		; minus_for_char
PUBLIC	?multiplication_for_int@@YAHHHHHHHHHHH@Z	; multiplication_for_int
PUBLIC	?multiplication_for_double@@YAHNNNNNNNNNN@Z	; multiplication_for_double
PUBLIC	?multiplication_for_long@@YAHJJJJJJJJJJ@Z	; multiplication_for_long
PUBLIC	?multiplication_for_float@@YAHMMMMMMMMMM@Z	; multiplication_for_float
PUBLIC	?multiplication_for_char@@YAHDDDDDDDDDD@Z	; multiplication_for_char
PUBLIC	?division_for_int@@YAHHHHHHHHHHH@Z		; division_for_int
PUBLIC	?division_for_double@@YAHNNNNNNNNNN@Z		; division_for_double
PUBLIC	?division_for_long@@YAHJJJJJJJJJJ@Z		; division_for_long
PUBLIC	?division_for_float@@YAHMMMMMMMMMM@Z		; division_for_float
PUBLIC	?division_for_char@@YAHDDDDDDDDDD@Z		; division_for_char
PUBLIC	?appropriation_for_int@@YAHHHHHHHHHHH@Z		; appropriation_for_int
PUBLIC	?appropriation_for_double@@YAHNNNNNNNNNN@Z	; appropriation_for_double
PUBLIC	?appropriation_for_long@@YAHJJJJJJJJJJ@Z	; appropriation_for_long
PUBLIC	?appropriation_for_float@@YAHMMMMMMMMMM@Z	; appropriation_for_float
PUBLIC	?appropriation_for_char@@YAHDDDDDDDDDD@Z	; appropriation_for_char
PUBLIC	?search_maximum@@YAXXZ				; search_maximum
PUBLIC	?cpu_overclocking@@YAXXZ			; cpu_overclocking
PUBLIC	?print_info@@YAXXZ				; print_info
PUBLIC	?plus_@@YAXXZ					; plus_
PUBLIC	?minus_@@YAXXZ					; minus_
PUBLIC	?multiplication_@@YAXXZ				; multiplication_
PUBLIC	?division_@@YAXXZ				; division_
PUBLIC	?appropriation_@@YAXXZ				; appropriation_
PUBLIC	_main
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_C@_0BL@NKPJCMOH@CPU?5TSC?5ticks?5per?5second?3?5@ ; `string'
PUBLIC	??_C@_03NDEAONJP@?5?5?5@			; `string'
PUBLIC	??_C@_09IJBHKDLN@int?5?5?5?5?5?5@		; `string'
PUBLIC	??_C@_09JMCFEFKO@double?5?5?5@			; `string'
PUBLIC	??_C@_07HEHAKBGF@long?5?5?5@			; `string'
PUBLIC	??_C@_08ODEMNAL@float?5?5?5@			; `string'
PUBLIC	??_C@_07DBKBCHGA@char?5?5?5@			; `string'
PUBLIC	??_C@_01IPJKGB@?$CD@				; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_02NAAALAOK@?5?$CF@			; `string'
PUBLIC	??_C@_0BF@CKMOEMFM@Laboratory?5work?5No?41@	; `string'
PUBLIC	??_C@_0DL@PMJGFDPG@Made?5by?5a?5student?5of?5group?5k?921@ ; `string'
PUBLIC	??_C@_0N@OHNIBEAB@?5iterations?4@		; `string'
PUBLIC	??_C@_04GJPPFNOH@?5in?5@			; `string'
PUBLIC	??_C@_05LKINLKBB@?5sec?4@			; `string'
PUBLIC	??_C@_0P@FNDJGEMI@Plus?5for?5int?3?5@		; `string'
PUBLIC	??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@ ; `string'
PUBLIC	??_C@_02GFKOMOKH@?5?$CI@			; `string'
PUBLIC	??_C@_0BC@JHOEHBHE@Plus?5for?5double?3?5@	; `string'
PUBLIC	??_C@_0BA@JLIENFLM@Plus?5for?5long?3?5@		; `string'
PUBLIC	??_C@_0BB@NJIGHGCI@Plus?5for?5float?3?5@	; `string'
PUBLIC	??_C@_0BA@JFFOKFJB@Plus?5for?5char?3?5@		; `string'
PUBLIC	??_C@_0BA@BKNOOKMK@Minus?5for?5int?3?5@		; `string'
PUBLIC	??_C@_0BD@PAOGHED@Minus?5for?5double?3?5@	; `string'
PUBLIC	??_C@_0BB@HFMNFDBO@Minus?5for?5long?3?5@	; `string'
PUBLIC	??_C@_0BC@OBLAPNGK@Minus?5for?5float?3?5@	; `string'
PUBLIC	??_C@_0BB@HLBHCDDD@Minus?5for?5char?3?5@	; `string'
PUBLIC	??_C@_0BJ@PKNHEODE@Multiplication?5for?5int?3?5@ ; `string'
PUBLIC	??_C@_0BM@DODPIDA@Multiplication?5for?5double?3?5@ ; `string'
PUBLIC	??_C@_0BK@CPCIIFKB@Multiplication?5for?5long?3?5@ ; `string'
PUBLIC	??_C@_0BK@CBPCPFIM@Multiplication?5for?5char?3?5@ ; `string'
PUBLIC	??_C@_0BD@MNAEHDHB@Division?5for?5int?3?5@	; `string'
PUBLIC	??_C@_0BG@IAHMPM@Division?5for?5double?3?5@	; `string'
PUBLIC	??_C@_0BE@CJKJODID@Division?5for?5long?3?5@	; `string'
PUBLIC	??_C@_0BF@GPFCHGCD@Division?5for?5float?3?5@	; `string'
PUBLIC	??_C@_0BE@CHHDJDKO@Division?5for?5char?3?5@	; `string'
PUBLIC	??_C@_0BI@FHMGCJPO@Appropriation?5for?5int?3?5@	; `string'
PUBLIC	??_C@_0BL@NPNHDGJJ@Appropriation?5for?5double?3?5@ ; `string'
PUBLIC	??_C@_0BJ@FEDELPGI@Appropriation?5for?5long?3?5@ ; `string'
PUBLIC	??_C@_0BK@FIPHNAIP@Appropriation?5for?5float?3?5@ ; `string'
PUBLIC	??_C@_0BJ@FKOOMPEF@Appropriation?5for?5char?3?5@ ; `string'
PUBLIC	__real@3e99999a
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@404139999999999a
PUBLIC	__real@4049000000000000
PUBLIC	__real@4055e00000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@423b1eb8
PUBLIC	__real@42a7cccd
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp__clock:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
EXTRN	__dtoul3:PROC
EXTRN	__ultod3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@42a7cccd
CONST	SEGMENT
__real@42a7cccd DD 042a7cccdr			; 83.9
CONST	ENDS
;	COMDAT __real@423b1eb8
CONST	SEGMENT
__real@423b1eb8 DD 0423b1eb8r			; 46.78
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4055e00000000000
CONST	SEGMENT
__real@4055e00000000000 DQ 04055e00000000000r	; 87.5
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@404139999999999a
CONST	SEGMENT
__real@404139999999999a DQ 0404139999999999ar	; 34.45
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BJ@FKOOMPEF@Appropriation?5for?5char?3?5@
CONST	SEGMENT
??_C@_0BJ@FKOOMPEF@Appropriation?5for?5char?3?5@ DB 'Appropriation for ch'
	DB	'ar: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FIPHNAIP@Appropriation?5for?5float?3?5@
CONST	SEGMENT
??_C@_0BK@FIPHNAIP@Appropriation?5for?5float?3?5@ DB 'Appropriation for f'
	DB	'loat: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FEDELPGI@Appropriation?5for?5long?3?5@
CONST	SEGMENT
??_C@_0BJ@FEDELPGI@Appropriation?5for?5long?3?5@ DB 'Appropriation for lo'
	DB	'ng: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NPNHDGJJ@Appropriation?5for?5double?3?5@
CONST	SEGMENT
??_C@_0BL@NPNHDGJJ@Appropriation?5for?5double?3?5@ DB 'Appropriation for '
	DB	'double: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FHMGCJPO@Appropriation?5for?5int?3?5@
CONST	SEGMENT
??_C@_0BI@FHMGCJPO@Appropriation?5for?5int?3?5@ DB 'Appropriation for int'
	DB	': ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHHDJDKO@Division?5for?5char?3?5@
CONST	SEGMENT
??_C@_0BE@CHHDJDKO@Division?5for?5char?3?5@ DB 'Division for char: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GPFCHGCD@Division?5for?5float?3?5@
CONST	SEGMENT
??_C@_0BF@GPFCHGCD@Division?5for?5float?3?5@ DB 'Division for float: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJKJODID@Division?5for?5long?3?5@
CONST	SEGMENT
??_C@_0BE@CJKJODID@Division?5for?5long?3?5@ DB 'Division for long: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IAHMPM@Division?5for?5double?3?5@
CONST	SEGMENT
??_C@_0BG@IAHMPM@Division?5for?5double?3?5@ DB 'Division for double: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MNAEHDHB@Division?5for?5int?3?5@
CONST	SEGMENT
??_C@_0BD@MNAEHDHB@Division?5for?5int?3?5@ DB 'Division for int: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CBPCPFIM@Multiplication?5for?5char?3?5@
CONST	SEGMENT
??_C@_0BK@CBPCPFIM@Multiplication?5for?5char?3?5@ DB 'Multiplication for '
	DB	'char: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CPCIIFKB@Multiplication?5for?5long?3?5@
CONST	SEGMENT
??_C@_0BK@CPCIIFKB@Multiplication?5for?5long?3?5@ DB 'Multiplication for '
	DB	'long: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DODPIDA@Multiplication?5for?5double?3?5@
CONST	SEGMENT
??_C@_0BM@DODPIDA@Multiplication?5for?5double?3?5@ DB 'Multiplication for'
	DB	' double: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKNHEODE@Multiplication?5for?5int?3?5@
CONST	SEGMENT
??_C@_0BJ@PKNHEODE@Multiplication?5for?5int?3?5@ DB 'Multiplication for i'
	DB	'nt: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLBHCDDD@Minus?5for?5char?3?5@
CONST	SEGMENT
??_C@_0BB@HLBHCDDD@Minus?5for?5char?3?5@ DB 'Minus for char: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OBLAPNGK@Minus?5for?5float?3?5@
CONST	SEGMENT
??_C@_0BC@OBLAPNGK@Minus?5for?5float?3?5@ DB 'Minus for float: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HFMNFDBO@Minus?5for?5long?3?5@
CONST	SEGMENT
??_C@_0BB@HFMNFDBO@Minus?5for?5long?3?5@ DB 'Minus for long: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PAOGHED@Minus?5for?5double?3?5@
CONST	SEGMENT
??_C@_0BD@PAOGHED@Minus?5for?5double?3?5@ DB 'Minus for double: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BKNOOKMK@Minus?5for?5int?3?5@
CONST	SEGMENT
??_C@_0BA@BKNOOKMK@Minus?5for?5int?3?5@ DB 'Minus for int: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFFOKFJB@Plus?5for?5char?3?5@
CONST	SEGMENT
??_C@_0BA@JFFOKFJB@Plus?5for?5char?3?5@ DB 'Plus for char: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NJIGHGCI@Plus?5for?5float?3?5@
CONST	SEGMENT
??_C@_0BB@NJIGHGCI@Plus?5for?5float?3?5@ DB 'Plus for float: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JLIENFLM@Plus?5for?5long?3?5@
CONST	SEGMENT
??_C@_0BA@JLIENFLM@Plus?5for?5long?3?5@ DB 'Plus for long: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JHOEHBHE@Plus?5for?5double?3?5@
CONST	SEGMENT
??_C@_0BC@JHOEHBHE@Plus?5for?5double?3?5@ DB 'Plus for double: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GFKOMOKH@?5?$CI@
CONST	SEGMENT
??_C@_02GFKOMOKH@?5?$CI@ DB ' (', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
CONST	SEGMENT
??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@ DB ' operations in 1 '
	DB	'second)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FNDJGEMI@Plus?5for?5int?3?5@
CONST	SEGMENT
??_C@_0P@FNDJGEMI@Plus?5for?5int?3?5@ DB 'Plus for int: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LKINLKBB@?5sec?4@
CONST	SEGMENT
??_C@_05LKINLKBB@?5sec?4@ DB ' sec.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5@ DB ' in ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OHNIBEAB@?5iterations?4@
CONST	SEGMENT
??_C@_0N@OHNIBEAB@?5iterations?4@ DB ' iterations.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PMJGFDPG@Made?5by?5a?5student?5of?5group?5k?921@
CONST	SEGMENT
??_C@_0DL@PMJGFDPG@Made?5by?5a?5student?5of?5group?5k?921@ DB 'Made by a '
	DB	'student of group k-21 Kyrychek Nikolay Pavlovich', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKMOEMFM@Laboratory?5work?5No?41@
CONST	SEGMENT
??_C@_0BF@CKMOEMFM@Laboratory?5work?5No?41@ DB 'Laboratory work No.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAAALAOK@?5?$CF@
CONST	SEGMENT
??_C@_02NAAALAOK@?5?$CF@ DB ' %', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IPJKGB@?$CD@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBKBCHGA@char?5?5?5@
CONST	SEGMENT
??_C@_07DBKBCHGA@char?5?5?5@ DB 'char   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ODEMNAL@float?5?5?5@
CONST	SEGMENT
??_C@_08ODEMNAL@float?5?5?5@ DB 'float   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HEHAKBGF@long?5?5?5@
CONST	SEGMENT
??_C@_07HEHAKBGF@long?5?5?5@ DB 'long   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JMCFEFKO@double?5?5?5@
CONST	SEGMENT
??_C@_09JMCFEFKO@double?5?5?5@ DB 'double   ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IJBHKDLN@int?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_09IJBHKDLN@int?5?5?5?5?5?5@ DB 'int      ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDEAONJP@?5?5?5@
CONST	SEGMENT
??_C@_03NDEAONJP@?5?5?5@ DB '   ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NKPJCMOH@CPU?5TSC?5ticks?5per?5second?3?5@
CONST	SEGMENT
??_C@_0BL@NKPJCMOH@CPU?5TSC?5ticks?5per?5second?3?5@ DB 'CPU TSC ticks pe'
	DB	'r second: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :         explicit __CLR_OR_THIS_CALL operator bool() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 126  :             return _Ok;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 127  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 111  : #if !_HAS_EXCEPTIONS
; 112  :             const bool _Zero_uncaught_exceptions = true;
; 113  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 114  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@sentry
	mov	BYTE PTR tv72[ebp], 1
	jmp	SHORT $LN5@sentry
$LN4@sentry:
	mov	BYTE PTR tv72[ebp], 0
$LN5@sentry:
	mov	cl, BYTE PTR tv72[ebp]
	mov	BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 115  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 116  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 117  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 118  : 
; 119  :             if (_Zero_uncaught_exceptions) {

	movzx	eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
	test	eax, eax
	je	SHORT $LN1@sentry

; 120  :                 this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 121  :             }
; 122  :         }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry

; 94   :                 _Ok = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 95   :                 return;

	jmp	SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

	cmp	DWORD PTR __Tied$[ebp], 0
	je	SHORT $LN4@sentry
	mov	eax, DWORD PTR __Tied$[ebp]
	cmp	eax, DWORD PTR __Ostr$[ebp]
	jne	SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1

; 101  :                 return;

	jmp	SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

	mov	esi, esp
	mov	ecx, DWORD PTR __Tied$[ebp]
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

	cmp	DWORD PTR __Rdbuf$[ebp], 0
	je	SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

	mov	eax, DWORD PTR __Rdbuf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR __Rdbuf$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

	cmp	DWORD PTR __Rdbuf$[ebp], 0
	je	SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

	mov	eax, DWORD PTR __Rdbuf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR __Rdbuf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT _main
_TEXT	SEGMENT
_main	PROC						; COMDAT

; 964  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 965  :     init_clock();

	call	?init_clock@@YAXXZ			; init_clock

; 966  : 
; 967  :     // print information about project
; 968  :     print_info();

	call	?print_info@@YAXXZ			; print_info

; 969  :     
; 970  :     // CPU overclocking
; 971  :     cpu_overclocking();

	call	?cpu_overclocking@@YAXXZ		; cpu_overclocking

; 972  : 
; 973  :     // cycle plus
; 974  :     plus_();

	call	?plus_@@YAXXZ				; plus_

; 975  : 
; 976  :     // cycle minus
; 977  :     minus_();

	call	?minus_@@YAXXZ				; minus_

; 978  : 
; 979  :     // cycle multiplication
; 980  :     multiplication_();

	call	?multiplication_@@YAXXZ			; multiplication_

; 981  : 
; 982  :     // cycle division
; 983  :     division_();

	call	?division_@@YAXXZ			; division_

; 984  : 
; 985  :     // cycle: Appropriation
; 986  :     appropriation_();

	call	?appropriation_@@YAXXZ			; appropriation_

; 987  : 
; 988  :     // building a diagram
; 989  :     search_maximum();

	call	?search_maximum@@YAXXZ			; search_maximum

; 990  : 
; 991  :     return 0;

	xor	eax, eax

; 992  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_@@YAXXZ
_TEXT	SEGMENT
?appropriation_@@YAXXZ PROC				; appropriation_, COMDAT

; 920  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 921  :     // cycle: Appropriation for int
; 922  :     ad_time[20] = appropriation_for_int(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

	mov	eax, DWORD PTR ?a10@@3HA		; a10
	push	eax
	mov	ecx, DWORD PTR ?a9@@3HA			; a9
	push	ecx
	mov	edx, DWORD PTR ?a8@@3HA			; a8
	push	edx
	mov	eax, DWORD PTR ?a7@@3HA			; a7
	push	eax
	mov	ecx, DWORD PTR ?a6@@3HA			; a6
	push	ecx
	mov	edx, DWORD PTR ?a5@@3HA			; a5
	push	edx
	mov	eax, DWORD PTR ?a4@@3HA			; a4
	push	eax
	mov	ecx, DWORD PTR ?a3@@3HA			; a3
	push	ecx
	mov	edx, DWORD PTR ?a2@@3HA			; a2
	push	edx
	mov	eax, DWORD PTR ?a1@@3HA			; a1
	push	eax
	call	?appropriation_for_int@@YAHHHHHHHHHHH@Z	; appropriation_for_int
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 20
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 923  :     ad_time[20] = double(ad_time[20]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 20
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 20
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 924  :     time_standart[20] = ad_time[20] / N_appropriation;

	mov	eax, 8
	imul	ecx, eax, 20
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 20
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 925  :     time_standart[20] = 1 / time_standart[20];

	mov	eax, 8
	imul	ecx, eax, 20
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 20
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 926  :     cout << "Appropriation for int: " << ad_time[20] << " sec." << " in " << N_appropriation << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 20
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BI@FHMGCJPO@Appropriation?5for?5int?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 927  :     cout << " (" << time_standart[20] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 20
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 928  : 
; 929  :     // cycle: Appropriation for double
; 930  :     ad_time[21] = appropriation_for_double(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10);

	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b10@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b9@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b8@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b7@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b6@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b5@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b4@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b3@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b2@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b1@@3NA
	movsd	QWORD PTR [esp], xmm0
	call	?appropriation_for_double@@YAHNNNNNNNNNN@Z ; appropriation_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 21
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 931  :     ad_time[21] = double(ad_time[21]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 21
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 21
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 932  :     time_standart[21] = ad_time[21] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 21
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 21
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 933  :     time_standart[21] = 1 / time_standart[21];

	mov	eax, 8
	imul	ecx, eax, 21
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 21
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 934  :     cout << "Appropriation for double: " << ad_time[21] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 21
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BL@NPNHDGJJ@Appropriation?5for?5double?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 935  :     cout << " (" << time_standart[21] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 21
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 936  : 
; 937  :     // cycle: Appropriation for long
; 938  :     ad_time[22] = appropriation_for_long(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

	mov	eax, DWORD PTR ?c10@@3JA		; c10
	push	eax
	mov	ecx, DWORD PTR ?c9@@3JA			; c9
	push	ecx
	mov	edx, DWORD PTR ?c8@@3JA			; c8
	push	edx
	mov	eax, DWORD PTR ?c7@@3JA			; c7
	push	eax
	mov	ecx, DWORD PTR ?c6@@3JA			; c6
	push	ecx
	mov	edx, DWORD PTR ?c5@@3JA			; c5
	push	edx
	mov	eax, DWORD PTR ?c4@@3JA			; c4
	push	eax
	mov	ecx, DWORD PTR ?c3@@3JA			; c3
	push	ecx
	mov	edx, DWORD PTR ?c2@@3JA			; c2
	push	edx
	mov	eax, DWORD PTR ?c1@@3JA			; c1
	push	eax
	call	?appropriation_for_long@@YAHJJJJJJJJJJ@Z ; appropriation_for_long
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 22
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 939  :     ad_time[22] = double(ad_time[22]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 22
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 22
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 940  :     time_standart[22] = ad_time[22] / N_appropriation;

	mov	eax, 8
	imul	ecx, eax, 22
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 22
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 941  :     time_standart[22] = 1 / time_standart[22];

	mov	eax, 8
	imul	ecx, eax, 22
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 22
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 942  :     cout << "Appropriation for long: " << ad_time[22] << " sec." << " in " << N_appropriation << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 22
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BJ@FEDELPGI@Appropriation?5for?5long?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 943  :     cout << " (" << time_standart[22] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 22
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 944  : 
; 945  :     // cycle: Appropriation for float
; 946  :     ad_time[23] = appropriation_for_float(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

	push	ecx
	movss	xmm0, DWORD PTR ?d10@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d9@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d8@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d7@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d6@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d5@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d4@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d3@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d2@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d1@@3MA
	movss	DWORD PTR [esp], xmm0
	call	?appropriation_for_float@@YAHMMMMMMMMMM@Z ; appropriation_for_float
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 23
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 947  :     ad_time[23] = double(ad_time[23]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 23
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 23
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 948  :     time_standart[23] = ad_time[23] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 23
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 23
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 949  :     time_standart[23] = 1 / time_standart[23];

	mov	eax, 8
	imul	ecx, eax, 23
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 23
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 950  :     cout << "Appropriation for float: " << ad_time[23] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 23
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BK@FIPHNAIP@Appropriation?5for?5float?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 951  :     cout << " (" << time_standart[23] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 23
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 952  : 
; 953  :     // cycle: Appropriation for char
; 954  :     ad_time[24] = appropriation_for_char(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);

	movzx	eax, BYTE PTR ?e10@@3DA			; e10
	push	eax
	movzx	ecx, BYTE PTR ?e9@@3DA			; e9
	push	ecx
	movzx	edx, BYTE PTR ?e8@@3DA			; e8
	push	edx
	movzx	eax, BYTE PTR ?e7@@3DA			; e7
	push	eax
	movzx	ecx, BYTE PTR ?e6@@3DA			; e6
	push	ecx
	movzx	edx, BYTE PTR ?e5@@3DA			; e5
	push	edx
	movzx	eax, BYTE PTR ?e4@@3DA			; e4
	push	eax
	movzx	ecx, BYTE PTR ?e3@@3DA			; e3
	push	ecx
	movzx	edx, BYTE PTR ?e2@@3DA			; e2
	push	edx
	movzx	eax, BYTE PTR ?e1@@3DA			; e1
	push	eax
	call	?appropriation_for_char@@YAHDDDDDDDDDD@Z ; appropriation_for_char
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 24
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 955  :     ad_time[24] = double(ad_time[24]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 24
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 24
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 956  :     time_standart[24] = ad_time[24] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 24
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 24
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 957  :     time_standart[24] = 1 / time_standart[24];

	mov	eax, 8
	imul	ecx, eax, 24
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 24
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 958  :     cout << "Appropriation for char: " << ad_time[24] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 24
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BJ@FKOOMPEF@Appropriation?5for?5char?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 959  :     cout << " (" << time_standart[24] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 24
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 960  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_@@YAXXZ ENDP				; appropriation_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_@@YAXXZ
_TEXT	SEGMENT
?division_@@YAXXZ PROC					; division_, COMDAT

; 877  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 878  :     // cycle: division for int
; 879  :     ad_time[15] = division_for_int(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

	mov	eax, DWORD PTR ?a10@@3HA		; a10
	push	eax
	mov	ecx, DWORD PTR ?a9@@3HA			; a9
	push	ecx
	mov	edx, DWORD PTR ?a8@@3HA			; a8
	push	edx
	mov	eax, DWORD PTR ?a7@@3HA			; a7
	push	eax
	mov	ecx, DWORD PTR ?a6@@3HA			; a6
	push	ecx
	mov	edx, DWORD PTR ?a5@@3HA			; a5
	push	edx
	mov	eax, DWORD PTR ?a4@@3HA			; a4
	push	eax
	mov	ecx, DWORD PTR ?a3@@3HA			; a3
	push	ecx
	mov	edx, DWORD PTR ?a2@@3HA			; a2
	push	edx
	mov	eax, DWORD PTR ?a1@@3HA			; a1
	push	eax
	call	?division_for_int@@YAHHHHHHHHHHH@Z	; division_for_int
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 15
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 880  :     ad_time[15] = double(ad_time[15]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 15
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 15
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 881  :     time_standart[15] = ad_time[15] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 15
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 15
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 882  :     time_standart[15] = 1 / time_standart[15];

	mov	eax, 8
	imul	ecx, eax, 15
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 15
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 883  :     cout << "Division for int: " << ad_time[15] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 15
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BD@MNAEHDHB@Division?5for?5int?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 884  :     cout << " (" << time_standart[15] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 15
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 885  : 
; 886  :     // cycle: division for double
; 887  :     ad_time[16] = division_for_double(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10);

	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b10@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b9@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b8@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b7@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b6@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b5@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b4@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b3@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b2@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b1@@3NA
	movsd	QWORD PTR [esp], xmm0
	call	?division_for_double@@YAHNNNNNNNNNN@Z	; division_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	shl	ecx, 4
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 888  :     ad_time[16] = double(ad_time[16]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	shl	eax, 4
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	shl	ecx, 4
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 889  :     time_standart[16] = ad_time[16] / N_standart;

	mov	eax, 8
	shl	eax, 4
	push	0
	push	100000					; 000186a0H
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	eax, 8
	shl	eax, 4
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 890  :     time_standart[16] = 1 / time_standart[16];

	mov	eax, 8
	shl	eax, 4
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	mov	ecx, 8
	shl	ecx, 4
	movsd	QWORD PTR ?time_standart@@3PANA[ecx], xmm0

; 891  :     cout << "Division for double: " << ad_time[16] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	shl	eax, 4
	mov	edi, esp
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	push	OFFSET ??_C@_0BG@IAHMPM@Division?5for?5double?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 892  :     cout << " (" << time_standart[16] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	shl	eax, 4
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 893  : 
; 894  :     // cycle: division for long
; 895  :     ad_time[17] = division_for_long(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

	mov	eax, DWORD PTR ?c10@@3JA		; c10
	push	eax
	mov	ecx, DWORD PTR ?c9@@3JA			; c9
	push	ecx
	mov	edx, DWORD PTR ?c8@@3JA			; c8
	push	edx
	mov	eax, DWORD PTR ?c7@@3JA			; c7
	push	eax
	mov	ecx, DWORD PTR ?c6@@3JA			; c6
	push	ecx
	mov	edx, DWORD PTR ?c5@@3JA			; c5
	push	edx
	mov	eax, DWORD PTR ?c4@@3JA			; c4
	push	eax
	mov	ecx, DWORD PTR ?c3@@3JA			; c3
	push	ecx
	mov	edx, DWORD PTR ?c2@@3JA			; c2
	push	edx
	mov	eax, DWORD PTR ?c1@@3JA			; c1
	push	eax
	call	?division_for_long@@YAHJJJJJJJJJJ@Z	; division_for_long
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 17
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 896  :     ad_time[17] = double(ad_time[17]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 17
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 17
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 897  :     time_standart[17] = ad_time[17] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 17
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 17
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 898  :     time_standart[17] = 1 / time_standart[17];

	mov	eax, 8
	imul	ecx, eax, 17
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 17
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 899  :     cout << "Division for long: " << ad_time[17] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 17
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BE@CJKJODID@Division?5for?5long?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 900  :     cout << " (" << time_standart[17] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 17
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 901  : 
; 902  :     // cycle: division for float
; 903  :     ad_time[18] = division_for_float(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

	push	ecx
	movss	xmm0, DWORD PTR ?d10@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d9@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d8@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d7@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d6@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d5@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d4@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d3@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d2@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d1@@3MA
	movss	DWORD PTR [esp], xmm0
	call	?division_for_float@@YAHMMMMMMMMMM@Z	; division_for_float
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 18
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 904  :     ad_time[18] = double(ad_time[18]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 18
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 18
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 905  :     time_standart[18] = ad_time[18] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 18
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 18
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 906  :     time_standart[18] = 1 / time_standart[18];

	mov	eax, 8
	imul	ecx, eax, 18
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 18
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 907  :     cout << "Division for float: " << ad_time[18] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 18
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BF@GPFCHGCD@Division?5for?5float?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 908  :     cout << " (" << time_standart[18] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 18
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 909  : 
; 910  :     // cycle: division for char
; 911  :     ad_time[19] = division_for_char(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);

	movzx	eax, BYTE PTR ?e10@@3DA			; e10
	push	eax
	movzx	ecx, BYTE PTR ?e9@@3DA			; e9
	push	ecx
	movzx	edx, BYTE PTR ?e8@@3DA			; e8
	push	edx
	movzx	eax, BYTE PTR ?e7@@3DA			; e7
	push	eax
	movzx	ecx, BYTE PTR ?e6@@3DA			; e6
	push	ecx
	movzx	edx, BYTE PTR ?e5@@3DA			; e5
	push	edx
	movzx	eax, BYTE PTR ?e4@@3DA			; e4
	push	eax
	movzx	ecx, BYTE PTR ?e3@@3DA			; e3
	push	ecx
	movzx	edx, BYTE PTR ?e2@@3DA			; e2
	push	edx
	movzx	eax, BYTE PTR ?e1@@3DA			; e1
	push	eax
	call	?division_for_char@@YAHDDDDDDDDDD@Z	; division_for_char
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 19
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 912  :     ad_time[19] = double(ad_time[19]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 19
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 19
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 913  :     time_standart[19] = ad_time[19] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 19
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 19
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 914  :     time_standart[19] = 1 / time_standart[19];

	mov	eax, 8
	imul	ecx, eax, 19
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 19
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 915  :     cout << "Division for char: " << ad_time[19] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 19
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BE@CHHDJDKO@Division?5for?5char?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 916  :     cout << " (" << time_standart[19] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 19
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 917  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_@@YAXXZ ENDP					; division_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_@@YAXXZ
_TEXT	SEGMENT
?multiplication_@@YAXXZ PROC				; multiplication_, COMDAT

; 834  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 835  :     // cycle: multiplication for int
; 836  :     ad_time[10] = multiplication_for_int(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

	mov	eax, DWORD PTR ?a10@@3HA		; a10
	push	eax
	mov	ecx, DWORD PTR ?a9@@3HA			; a9
	push	ecx
	mov	edx, DWORD PTR ?a8@@3HA			; a8
	push	edx
	mov	eax, DWORD PTR ?a7@@3HA			; a7
	push	eax
	mov	ecx, DWORD PTR ?a6@@3HA			; a6
	push	ecx
	mov	edx, DWORD PTR ?a5@@3HA			; a5
	push	edx
	mov	eax, DWORD PTR ?a4@@3HA			; a4
	push	eax
	mov	ecx, DWORD PTR ?a3@@3HA			; a3
	push	ecx
	mov	edx, DWORD PTR ?a2@@3HA			; a2
	push	edx
	mov	eax, DWORD PTR ?a1@@3HA			; a1
	push	eax
	call	?multiplication_for_int@@YAHHHHHHHHHHH@Z ; multiplication_for_int
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 10
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 837  :     ad_time[10] = double(ad_time[10]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 10
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 10
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 838  :     time_standart[10] = ad_time[10] / N_multiplication;

	mov	eax, 8
	imul	ecx, eax, 10
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 10
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 839  :     time_standart[10] = 1 / time_standart[10];

	mov	eax, 8
	imul	ecx, eax, 10
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 10
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 840  :     cout << "Multiplication for int: " << ad_time[10] << " sec." << " in " << N_multiplication << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 10
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BJ@PKNHEODE@Multiplication?5for?5int?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 841  :     cout << " (" << time_standart[10] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 10
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 842  : 
; 843  :     // cycle: multiplication for double
; 844  :     ad_time[11] = multiplication_for_double(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10);

	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b10@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b9@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b8@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b7@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b6@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b5@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b4@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b3@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b2@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b1@@3NA
	movsd	QWORD PTR [esp], xmm0
	call	?multiplication_for_double@@YAHNNNNNNNNNN@Z ; multiplication_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 11
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 845  :     ad_time[11] = double(ad_time[11]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 11
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 11
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 846  :     time_standart[11] = ad_time[11] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 11
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 11
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 847  :     time_standart[11] = 1 / time_standart[11];

	mov	eax, 8
	imul	ecx, eax, 11
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 11
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 848  :     cout << "Multiplication for double: " << ad_time[11] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 11
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BM@DODPIDA@Multiplication?5for?5double?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 849  :     cout << " (" << time_standart[11] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 11
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 850  : 
; 851  :     // cycle: multiplication for long
; 852  :     ad_time[12] = multiplication_for_long(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

	mov	eax, DWORD PTR ?c10@@3JA		; c10
	push	eax
	mov	ecx, DWORD PTR ?c9@@3JA			; c9
	push	ecx
	mov	edx, DWORD PTR ?c8@@3JA			; c8
	push	edx
	mov	eax, DWORD PTR ?c7@@3JA			; c7
	push	eax
	mov	ecx, DWORD PTR ?c6@@3JA			; c6
	push	ecx
	mov	edx, DWORD PTR ?c5@@3JA			; c5
	push	edx
	mov	eax, DWORD PTR ?c4@@3JA			; c4
	push	eax
	mov	ecx, DWORD PTR ?c3@@3JA			; c3
	push	ecx
	mov	edx, DWORD PTR ?c2@@3JA			; c2
	push	edx
	mov	eax, DWORD PTR ?c1@@3JA			; c1
	push	eax
	call	?multiplication_for_long@@YAHJJJJJJJJJJ@Z ; multiplication_for_long
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 12
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 853  :     ad_time[12] = double(ad_time[12]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 12
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 12
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 854  :     time_standart[12] = ad_time[12] / N_multiplication;

	mov	eax, 8
	imul	ecx, eax, 12
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 12
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 855  :     time_standart[12] = 1 / time_standart[12];

	mov	eax, 8
	imul	ecx, eax, 12
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 12
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 856  :     cout << "Multiplication for long: " << ad_time[12] << " sec." << " in " << N_multiplication << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 12
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BK@CPCIIFKB@Multiplication?5for?5long?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 857  :     cout << " (" << time_standart[12] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 12
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 858  : 
; 859  :     // cycle: multiplication for float
; 860  :     ad_time[13] = multiplication_for_double(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

	cvtss2sd xmm0, DWORD PTR ?d10@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d9@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d8@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d7@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d6@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d5@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d4@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d3@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d2@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR ?d1@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?multiplication_for_double@@YAHNNNNNNNNNN@Z ; multiplication_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 13
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 861  :     ad_time[13] = double(ad_time[13]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 13
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 13
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 862  :     time_standart[13] = ad_time[13] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 13
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 13
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 863  :     time_standart[13] = 1 / time_standart[13];

	mov	eax, 8
	imul	ecx, eax, 13
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 13
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 864  :     cout << "Multiplication for double: " << ad_time[13] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 13
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BM@DODPIDA@Multiplication?5for?5double?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 865  :     cout << " (" << time_standart[13] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 13
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 866  : 
; 867  :     // cycle: multiplication for char
; 868  :     ad_time[14] = multiplication_for_char(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);

	movzx	eax, BYTE PTR ?e10@@3DA			; e10
	push	eax
	movzx	ecx, BYTE PTR ?e9@@3DA			; e9
	push	ecx
	movzx	edx, BYTE PTR ?e8@@3DA			; e8
	push	edx
	movzx	eax, BYTE PTR ?e7@@3DA			; e7
	push	eax
	movzx	ecx, BYTE PTR ?e6@@3DA			; e6
	push	ecx
	movzx	edx, BYTE PTR ?e5@@3DA			; e5
	push	edx
	movzx	eax, BYTE PTR ?e4@@3DA			; e4
	push	eax
	movzx	ecx, BYTE PTR ?e3@@3DA			; e3
	push	ecx
	movzx	edx, BYTE PTR ?e2@@3DA			; e2
	push	edx
	movzx	eax, BYTE PTR ?e1@@3DA			; e1
	push	eax
	call	?multiplication_for_char@@YAHDDDDDDDDDD@Z ; multiplication_for_char
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 14
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 869  :     ad_time[14] = double(ad_time[14]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 14
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 14
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 870  :     time_standart[14] = ad_time[14] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 14
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 14
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 871  :     time_standart[14] = 1 / time_standart[14];

	mov	eax, 8
	imul	ecx, eax, 14
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 14
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 872  :     cout << "Multiplication for char: " << ad_time[14] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 14
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BK@CBPCPFIM@Multiplication?5for?5char?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 873  :     cout << " (" << time_standart[14] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 14
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 874  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_@@YAXXZ ENDP				; multiplication_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_@@YAXXZ
_TEXT	SEGMENT
?minus_@@YAXXZ PROC					; minus_, COMDAT

; 791  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 792  :     // cycle: minus for int
; 793  :     ad_time[5] = minus_for_int(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

	mov	eax, DWORD PTR ?a10@@3HA		; a10
	push	eax
	mov	ecx, DWORD PTR ?a9@@3HA			; a9
	push	ecx
	mov	edx, DWORD PTR ?a8@@3HA			; a8
	push	edx
	mov	eax, DWORD PTR ?a7@@3HA			; a7
	push	eax
	mov	ecx, DWORD PTR ?a6@@3HA			; a6
	push	ecx
	mov	edx, DWORD PTR ?a5@@3HA			; a5
	push	edx
	mov	eax, DWORD PTR ?a4@@3HA			; a4
	push	eax
	mov	ecx, DWORD PTR ?a3@@3HA			; a3
	push	ecx
	mov	edx, DWORD PTR ?a2@@3HA			; a2
	push	edx
	mov	eax, DWORD PTR ?a1@@3HA			; a1
	push	eax
	call	?minus_for_int@@YAHHHHHHHHHHH@Z		; minus_for_int
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 5
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 794  :     ad_time[5] = double(ad_time[5]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 5
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 5
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 795  :     time_standart[5] = ad_time[5] / N_minus;

	mov	eax, 8
	imul	ecx, eax, 5
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 5
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 796  :     time_standart[5] = 1 / time_standart[5];

	mov	eax, 8
	imul	ecx, eax, 5
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 5
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 797  :     cout << "Minus for int: " << ad_time[5] << " sec." << " in " << N_minus << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 5
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BA@BKNOOKMK@Minus?5for?5int?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 798  :     cout << " (" << time_standart[5] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 5
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 799  : 
; 800  :     // cycle: minus for double
; 801  :     ad_time[6] = minus_for_double(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10);

	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b10@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b9@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b8@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b7@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b6@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b5@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b4@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b3@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b2@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b1@@3NA
	movsd	QWORD PTR [esp], xmm0
	call	?minus_for_double@@YAHNNNNNNNNNN@Z	; minus_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 6
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 802  :     ad_time[6] = double(ad_time[6]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 6
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 6
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 803  :     time_standart[6] = ad_time[6] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 6
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 6
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 804  :     time_standart[6] = 1 / time_standart[6];

	mov	eax, 8
	imul	ecx, eax, 6
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 6
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 805  :     cout << "Minus for double: " << ad_time[6] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 6
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BD@PAOGHED@Minus?5for?5double?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 806  :     cout << " (" << time_standart[6] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 6
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 807  : 
; 808  :     // cycle: minus for long
; 809  :     ad_time[7] = minus_for_long(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

	mov	eax, DWORD PTR ?c10@@3JA		; c10
	push	eax
	mov	ecx, DWORD PTR ?c9@@3JA			; c9
	push	ecx
	mov	edx, DWORD PTR ?c8@@3JA			; c8
	push	edx
	mov	eax, DWORD PTR ?c7@@3JA			; c7
	push	eax
	mov	ecx, DWORD PTR ?c6@@3JA			; c6
	push	ecx
	mov	edx, DWORD PTR ?c5@@3JA			; c5
	push	edx
	mov	eax, DWORD PTR ?c4@@3JA			; c4
	push	eax
	mov	ecx, DWORD PTR ?c3@@3JA			; c3
	push	ecx
	mov	edx, DWORD PTR ?c2@@3JA			; c2
	push	edx
	mov	eax, DWORD PTR ?c1@@3JA			; c1
	push	eax
	call	?minus_for_long@@YAHJJJJJJJJJJ@Z	; minus_for_long
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 7
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 810  :     ad_time[7] = double(ad_time[7]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 7
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 7
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 811  :     time_standart[7] = ad_time[7] / N_minus;

	mov	eax, 8
	imul	ecx, eax, 7
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 7
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 812  :     time_standart[7] = 1 / time_standart[7];

	mov	eax, 8
	imul	ecx, eax, 7
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 7
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 813  :     cout << "Minus for long: " << ad_time[7] << " sec." << " in " << N_minus << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 7
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BB@HFMNFDBO@Minus?5for?5long?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 814  :     cout << " (" << time_standart[7] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 7
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 815  : 
; 816  :     // cycle: minus for float
; 817  :     ad_time[8] = minus_for_float(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

	push	ecx
	movss	xmm0, DWORD PTR ?d10@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d9@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d8@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d7@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d6@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d5@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d4@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d3@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d2@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d1@@3MA
	movss	DWORD PTR [esp], xmm0
	call	?minus_for_float@@YAHMMMMMMMMMM@Z	; minus_for_float
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	shl	ecx, 3
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 818  :     ad_time[8] = double(ad_time[8]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	shl	ecx, 3
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 819  :     time_standart[8] = ad_time[8] / N_standart;

	mov	eax, 8
	shl	eax, 3
	push	0
	push	100000					; 000186a0H
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	eax, 8
	shl	eax, 3
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 820  :     time_standart[8] = 1 / time_standart[8];

	mov	eax, 8
	shl	eax, 3
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	mov	ecx, 8
	shl	ecx, 3
	movsd	QWORD PTR ?time_standart@@3PANA[ecx], xmm0

; 821  :     cout << "Minus for float: " << ad_time[8] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	shl	eax, 3
	mov	edi, esp
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	push	OFFSET ??_C@_0BC@OBLAPNGK@Minus?5for?5float?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 822  :     cout << " (" << time_standart[8] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	shl	eax, 3
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 823  : 
; 824  :     // cycle: minus for char
; 825  :     ad_time[9] = minus_for_double(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);

	movsx	eax, BYTE PTR ?e10@@3DA			; e10
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	ecx, BYTE PTR ?e9@@3DA			; e9
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	edx, BYTE PTR ?e8@@3DA			; e8
	cvtsi2sd xmm0, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	eax, BYTE PTR ?e7@@3DA			; e7
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	ecx, BYTE PTR ?e6@@3DA			; e6
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	edx, BYTE PTR ?e5@@3DA			; e5
	cvtsi2sd xmm0, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	eax, BYTE PTR ?e4@@3DA			; e4
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	ecx, BYTE PTR ?e3@@3DA			; e3
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	edx, BYTE PTR ?e2@@3DA			; e2
	cvtsi2sd xmm0, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsx	eax, BYTE PTR ?e1@@3DA			; e1
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?minus_for_double@@YAHNNNNNNNNNN@Z	; minus_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 9
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 826  :     ad_time[9] = double(ad_time[9]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 9
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 9
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 827  :     time_standart[9] = ad_time[9] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 9
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 9
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 828  :     time_standart[9] = 1 / time_standart[9];

	mov	eax, 8
	imul	ecx, eax, 9
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 9
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 829  :     cout << "Minus for char: " << ad_time[9] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 9
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BB@HLBHCDDD@Minus?5for?5char?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 830  :     cout << " (" << time_standart[9] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 9
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_@@YAXXZ ENDP					; minus_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_@@YAXXZ
_TEXT	SEGMENT
?plus_@@YAXXZ PROC					; plus_, COMDAT

; 747  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 748  :     // cycle: plus for int
; 749  :     ad_time[0] = plus_for_int(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

	mov	eax, DWORD PTR ?a10@@3HA		; a10
	push	eax
	mov	ecx, DWORD PTR ?a9@@3HA			; a9
	push	ecx
	mov	edx, DWORD PTR ?a8@@3HA			; a8
	push	edx
	mov	eax, DWORD PTR ?a7@@3HA			; a7
	push	eax
	mov	ecx, DWORD PTR ?a6@@3HA			; a6
	push	ecx
	mov	edx, DWORD PTR ?a5@@3HA			; a5
	push	edx
	mov	eax, DWORD PTR ?a4@@3HA			; a4
	push	eax
	mov	ecx, DWORD PTR ?a3@@3HA			; a3
	push	ecx
	mov	edx, DWORD PTR ?a2@@3HA			; a2
	push	edx
	mov	eax, DWORD PTR ?a1@@3HA			; a1
	push	eax
	call	?plus_for_int@@YA_KHHHHHHHHHH@Z		; plus_for_int
	add	esp, 40					; 00000028H
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 750  : 
; 751  :     ad_time[0] = double(ad_time[0]) / CLOCKS_PER_SEC;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 752  :     time_standart[0] = ad_time[0] / N_plus - empty_time;

	mov	eax, 8
	imul	ecx, eax, 0
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 753  :     time_standart[0] = 1 / time_standart[0];

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 0
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 754  :     cout << "Plus for int: " << ad_time[0] << " sec." << " in " << N_plus << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0P@FNDJGEMI@Plus?5for?5int?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 755  :     cout << " (" << time_standart[0] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 756  : 
; 757  :     // cycle: plus for double
; 758  :     ad_time[1] = plus_for_double(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10);

	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b10@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b9@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b8@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b7@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b6@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b5@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b4@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b3@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b2@@3NA
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?b1@@3NA
	movsd	QWORD PTR [esp], xmm0
	call	?plus_for_double@@YAHNNNNNNNNNN@Z	; plus_for_double
	add	esp, 80					; 00000050H
	cdq
	mov	ecx, 8
	shl	ecx, 0
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 759  :     ad_time[1] = double(ad_time[1]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	shl	ecx, 0
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 760  :     time_standart[1] = ad_time[1] / N_standart;

	mov	eax, 8
	shl	eax, 0
	push	0
	push	100000					; 000186a0H
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	eax, 8
	shl	eax, 0
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 761  :     time_standart[1] = 1 / time_standart[1];

	mov	eax, 8
	shl	eax, 0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	mov	ecx, 8
	shl	ecx, 0
	movsd	QWORD PTR ?time_standart@@3PANA[ecx], xmm0

; 762  :     cout << "Plus for double: " << ad_time[1] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	shl	eax, 0
	mov	edi, esp
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	push	OFFSET ??_C@_0BC@JHOEHBHE@Plus?5for?5double?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 763  :     cout << " (" << time_standart[1] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	shl	eax, 0
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 764  : 
; 765  :     // cycle: plus for long
; 766  :     ad_time[2] = plus_for_long(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

	mov	eax, DWORD PTR ?c10@@3JA		; c10
	push	eax
	mov	ecx, DWORD PTR ?c9@@3JA			; c9
	push	ecx
	mov	edx, DWORD PTR ?c8@@3JA			; c8
	push	edx
	mov	eax, DWORD PTR ?c7@@3JA			; c7
	push	eax
	mov	ecx, DWORD PTR ?c6@@3JA			; c6
	push	ecx
	mov	edx, DWORD PTR ?c5@@3JA			; c5
	push	edx
	mov	eax, DWORD PTR ?c4@@3JA			; c4
	push	eax
	mov	ecx, DWORD PTR ?c3@@3JA			; c3
	push	ecx
	mov	edx, DWORD PTR ?c2@@3JA			; c2
	push	edx
	mov	eax, DWORD PTR ?c1@@3JA			; c1
	push	eax
	call	?plus_for_long@@YAHJJJJJJJJJJ@Z		; plus_for_long
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	shl	ecx, 1
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 767  :     ad_time[2] = double(ad_time[2]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	shl	ecx, 1
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 768  :     time_standart[2] = ad_time[2] / N_plus;

	mov	eax, 8
	shl	eax, 1
	push	0
	push	1000000					; 000f4240H
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	eax, 8
	shl	eax, 1
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 769  :     time_standart[2] = 1 / time_standart[2];

	mov	eax, 8
	shl	eax, 1
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	mov	ecx, 8
	shl	ecx, 1
	movsd	QWORD PTR ?time_standart@@3PANA[ecx], xmm0

; 770  :     cout << "Plus for long: " << ad_time[2] << " sec." << " in " << N_plus << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	1000000					; 000f4240H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	shl	eax, 1
	mov	edi, esp
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	push	OFFSET ??_C@_0BA@JLIENFLM@Plus?5for?5long?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 771  :     cout << " (" << time_standart[2] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	shl	eax, 1
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 772  : 
; 773  :     // cycle: plus for float
; 774  :     ad_time[3] = plus_for_float(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);

	push	ecx
	movss	xmm0, DWORD PTR ?d10@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d9@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d8@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d7@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d6@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d5@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d4@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d3@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d2@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?d1@@3MA
	movss	DWORD PTR [esp], xmm0
	call	?plus_for_float@@YAHMMMMMMMMMM@Z	; plus_for_float
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	imul	ecx, ecx, 3
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 775  :     ad_time[3] = double(ad_time[3]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	imul	ecx, eax, 3
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	imul	ecx, ecx, 3
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 776  :     time_standart[3] = ad_time[3] / N_standart;

	mov	eax, 8
	imul	ecx, eax, 3
	push	0
	push	100000					; 000186a0H
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	ecx, 8
	imul	edx, ecx, 3
	movsd	QWORD PTR ?time_standart@@3PANA[edx], xmm0

; 777  :     time_standart[3] = 1 / time_standart[3];

	mov	eax, 8
	imul	ecx, eax, 3
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	mov	edx, 8
	imul	eax, edx, 3
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 778  :     cout << "Plus for float: " << ad_time[3] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edi, esp
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[ecx+4]
	push	edx
	mov	eax, DWORD PTR ?ad_time@@3PA_KA[ecx]
	push	eax
	push	OFFSET ??_C@_0BB@NJIGHGCI@Plus?5for?5float?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 779  :     cout << " (" << time_standart[3] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 780  : 
; 781  :     // cycle: plus for char
; 782  :     ad_time[4] = plus_for_char(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);

	movzx	eax, BYTE PTR ?e10@@3DA			; e10
	push	eax
	movzx	ecx, BYTE PTR ?e9@@3DA			; e9
	push	ecx
	movzx	edx, BYTE PTR ?e8@@3DA			; e8
	push	edx
	movzx	eax, BYTE PTR ?e7@@3DA			; e7
	push	eax
	movzx	ecx, BYTE PTR ?e6@@3DA			; e6
	push	ecx
	movzx	edx, BYTE PTR ?e5@@3DA			; e5
	push	edx
	movzx	eax, BYTE PTR ?e4@@3DA			; e4
	push	eax
	movzx	ecx, BYTE PTR ?e3@@3DA			; e3
	push	ecx
	movzx	edx, BYTE PTR ?e2@@3DA			; e2
	push	edx
	movzx	eax, BYTE PTR ?e1@@3DA			; e1
	push	eax
	call	?plus_for_char@@YAHDDDDDDDDDD@Z		; plus_for_char
	add	esp, 40					; 00000028H
	cdq
	mov	ecx, 8
	shl	ecx, 2
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 783  :     ad_time[4] = double(ad_time[4]) / CLOCKS_PER_SEC - empty_time;

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax]
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@408f400000000000
	subsd	xmm0, QWORD PTR ?empty_time@@3NA
	call	__dtoul3
	mov	ecx, 8
	shl	ecx, 2
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx], eax
	mov	DWORD PTR ?ad_time@@3PA_KA[ecx+4], edx

; 784  :     time_standart[4] = ad_time[4] / N_standart;

	mov	eax, 8
	shl	eax, 2
	push	0
	push	100000					; 000186a0H
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	call	__aulldiv
	mov	ecx, eax
	call	__ultod3
	mov	eax, 8
	shl	eax, 2
	movsd	QWORD PTR ?time_standart@@3PANA[eax], xmm0

; 785  :     time_standart[4] = 1 / time_standart[4];

	mov	eax, 8
	shl	eax, 2
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	mov	ecx, 8
	shl	ecx, 2
	movsd	QWORD PTR ?time_standart@@3PANA[ecx], xmm0

; 786  :     cout << "Plus for char: " << ad_time[4] << " sec." << " in " << N_standart << " iterations.";

	push	OFFSET ??_C@_0N@OHNIBEAB@?5iterations?4@
	mov	esi, esp
	push	100000					; 000186a0H
	push	OFFSET ??_C@_04GJPPFNOH@?5in?5@
	push	OFFSET ??_C@_05LKINLKBB@?5sec?4@
	mov	eax, 8
	shl	eax, 2
	mov	edi, esp
	mov	ecx, DWORD PTR ?ad_time@@3PA_KA[eax+4]
	push	ecx
	mov	edx, DWORD PTR ?ad_time@@3PA_KA[eax]
	push	edx
	push	OFFSET ??_C@_0BA@JFFOKFJB@Plus?5for?5char?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 787  :     cout << " (" << time_standart[4] << " operations in 1 second)" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BJ@JJIKOBFG@?5operations?5in?51?5second?$CJ@
	mov	eax, 8
	shl	eax, 2
	mov	edi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 788  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_@@YAXXZ ENDP					; plus_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?print_info@@YAXXZ
_TEXT	SEGMENT
?print_info@@YAXXZ PROC					; print_info, COMDAT

; 739  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 740  :     cout << "Laboratory work No.1" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0BF@CKMOEMFM@Laboratory?5work?5No?41@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 741  :     cout << "Made by a student of group k-21 Kyrychek Nikolay Pavlovich" << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0DL@PMJGFDPG@Made?5by?5a?5student?5of?5group?5k?921@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 742  :     cout << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 743  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print_info@@YAXXZ ENDP					; print_info
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?cpu_overclocking@@YAXXZ
_TEXT	SEGMENT
_time_$ = -296						; size = 8
_end_time_$ = -280					; size = 8
_i$1 = -264						; size = 4
_start_time_$ = -252					; size = 8
_time__$ = -236						; size = 8
_end_time__$ = -220					; size = 8
_start_time__$ = -204					; size = 8
_res_char$ = -185					; size = 1
_res_float$ = -176					; size = 4
_res_long$ = -164					; size = 4
_res_double$ = -152					; size = 8
_res_int$ = -136					; size = 4
_cpu_char_check2$ = -121				; size = 1
_cpu_char_check1$ = -109				; size = 1
_cpu_float_check2$ = -100				; size = 4
_cpu_float_check1$ = -88				; size = 4
_cpu_long_check2$ = -76					; size = 4
_cpu_long_check1$ = -64					; size = 4
_cpu_double_check2$ = -52				; size = 8
_cpu_double_check1$ = -36				; size = 8
_cpu_int_check2$ = -20					; size = 4
_cpu_int_check1$ = -8					; size = 4
?cpu_overclocking@@YAXXZ PROC				; cpu_overclocking, COMDAT

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 658  :     int cpu_int_check1 = 34, cpu_int_check2 = 87;

	mov	DWORD PTR _cpu_int_check1$[ebp], 34	; 00000022H
	mov	DWORD PTR _cpu_int_check2$[ebp], 87	; 00000057H

; 659  :     double cpu_double_check1 = 34.45, cpu_double_check2 = 87.5;

	movsd	xmm0, QWORD PTR __real@404139999999999a
	movsd	QWORD PTR _cpu_double_check1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@4055e00000000000
	movsd	QWORD PTR _cpu_double_check2$[ebp], xmm0

; 660  :     long cpu_long_check1 = 25, cpu_long_check2 = 56;

	mov	DWORD PTR _cpu_long_check1$[ebp], 25	; 00000019H
	mov	DWORD PTR _cpu_long_check2$[ebp], 56	; 00000038H

; 661  :     float cpu_float_check1 = 46.78f, cpu_float_check2 = 83.9f;

	movss	xmm0, DWORD PTR __real@423b1eb8
	movss	DWORD PTR _cpu_float_check1$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@42a7cccd
	movss	DWORD PTR _cpu_float_check2$[ebp], xmm0

; 662  :     char cpu_char_check1 = 89, cpu_char_check2 = 47;

	mov	BYTE PTR _cpu_char_check1$[ebp], 89	; 00000059H
	mov	BYTE PTR _cpu_char_check2$[ebp], 47	; 0000002fH

; 663  : 
; 664  :     int res_int = 0;

	mov	DWORD PTR _res_int$[ebp], 0

; 665  :     double res_double = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 666  :     long res_long = 0;

	mov	DWORD PTR _res_long$[ebp], 0

; 667  :     float res_float = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _res_float$[ebp], xmm0

; 668  :     char res_char = 0;

	mov	BYTE PTR _res_char$[ebp], 0

; 669  : 
; 670  :     double start_time__ = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _start_time__$[ebp], xmm0

; 671  :     res_int = cpu_int_check1 + cpu_int_check2;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	add	eax, DWORD PTR _cpu_int_check2$[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 672  :     res_int = cpu_int_check1 - cpu_int_check2;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	sub	eax, DWORD PTR _cpu_int_check2$[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 673  :     res_int = cpu_int_check1 * cpu_int_check2;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	imul	eax, DWORD PTR _cpu_int_check2$[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 674  :     res_int = cpu_int_check1 / cpu_int_check2;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	cdq
	idiv	DWORD PTR _cpu_int_check2$[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 675  : 
; 676  :     res_double = cpu_double_check1 + cpu_double_check2;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	addsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 677  :     res_double = cpu_double_check1 - cpu_double_check2;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	subsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 678  :     res_double = cpu_double_check1 * cpu_double_check2;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	mulsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 679  :     res_double = cpu_double_check1 / cpu_double_check2;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	divsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 680  : 
; 681  :     res_long = cpu_long_check1 + cpu_long_check2;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	add	eax, DWORD PTR _cpu_long_check2$[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 682  :     res_long = cpu_long_check1 - cpu_long_check2;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	sub	eax, DWORD PTR _cpu_long_check2$[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 683  :     res_long = cpu_long_check1 * cpu_long_check2;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	imul	eax, DWORD PTR _cpu_long_check2$[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 684  :     res_long = cpu_long_check1 / cpu_long_check2;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	cdq
	idiv	DWORD PTR _cpu_long_check2$[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 685  : 
; 686  :     res_float = cpu_float_check1 + cpu_float_check2;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	addss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	movss	DWORD PTR _res_float$[ebp], xmm0

; 687  :     res_float = cpu_float_check1 - cpu_float_check2;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	subss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	movss	DWORD PTR _res_float$[ebp], xmm0

; 688  :     res_float = cpu_float_check1 * cpu_float_check2;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	mulss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	movss	DWORD PTR _res_float$[ebp], xmm0

; 689  :     res_float = cpu_float_check1 / cpu_float_check2;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	divss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	movss	DWORD PTR _res_float$[ebp], xmm0

; 690  : 
; 691  :     res_char = cpu_char_check1 + cpu_char_check2;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	add	eax, ecx
	mov	BYTE PTR _res_char$[ebp], al

; 692  :     res_char = cpu_char_check1 - cpu_char_check2;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _res_char$[ebp], al

; 693  :     res_char = cpu_char_check1 * cpu_char_check2;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _res_char$[ebp], al

; 694  :     res_char = cpu_char_check1 / cpu_char_check2;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _res_char$[ebp], al

; 695  :     double end_time__ = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _end_time__$[ebp], xmm0

; 696  :     double time__ = end_time__ - start_time__;

	movsd	xmm0, QWORD PTR _end_time__$[ebp]
	subsd	xmm0, QWORD PTR _start_time__$[ebp]
	movsd	QWORD PTR _time__$[ebp], xmm0

; 697  : 
; 698  :     res_int = 0;

	mov	DWORD PTR _res_int$[ebp], 0

; 699  :     res_double = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 700  :     res_long = 0;

	mov	DWORD PTR _res_long$[ebp], 0

; 701  :     res_float = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _res_float$[ebp], xmm0

; 702  :     res_char = 0;

	mov	BYTE PTR _res_char$[ebp], 0

; 703  : 
; 704  :     double start_time_ = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _start_time_$[ebp], xmm0

; 705  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@cpu_overcl
$LN2@cpu_overcl:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@cpu_overcl:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@cpu_overcl

; 706  :     {
; 707  :         res_int = cpu_int_check1 + cpu_int_check2 + i;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	add	eax, DWORD PTR _cpu_int_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 708  :         res_int = cpu_int_check1 - cpu_int_check2 + i;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	sub	eax, DWORD PTR _cpu_int_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 709  :         res_int = cpu_int_check1 * cpu_int_check2 + i;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	imul	eax, DWORD PTR _cpu_int_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 710  :         res_int = cpu_int_check1 / cpu_int_check2 + i;

	mov	eax, DWORD PTR _cpu_int_check1$[ebp]
	cdq
	idiv	DWORD PTR _cpu_int_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_int$[ebp], eax

; 711  : 
; 712  :         res_double = cpu_double_check1 + cpu_double_check2 + i;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	addsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	cvtsi2sd xmm1, DWORD PTR _i$1[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 713  :         res_double = cpu_double_check1 - cpu_double_check2 + i;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	subsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	cvtsi2sd xmm1, DWORD PTR _i$1[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 714  :         res_double = cpu_double_check1 * cpu_double_check2 + i;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	mulsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	cvtsi2sd xmm1, DWORD PTR _i$1[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 715  :         res_double = cpu_double_check1 / cpu_double_check2 + i;

	movsd	xmm0, QWORD PTR _cpu_double_check1$[ebp]
	divsd	xmm0, QWORD PTR _cpu_double_check2$[ebp]
	cvtsi2sd xmm1, DWORD PTR _i$1[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _res_double$[ebp], xmm0

; 716  : 
; 717  :         res_long = cpu_long_check1 + cpu_long_check2 + i;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	add	eax, DWORD PTR _cpu_long_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 718  :         res_long = cpu_long_check1 - cpu_long_check2 + i;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	sub	eax, DWORD PTR _cpu_long_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 719  :         res_long = cpu_long_check1 * cpu_long_check2 + i;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	imul	eax, DWORD PTR _cpu_long_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 720  :         res_long = cpu_long_check1 / cpu_long_check2 + i;

	mov	eax, DWORD PTR _cpu_long_check1$[ebp]
	cdq
	idiv	DWORD PTR _cpu_long_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _res_long$[ebp], eax

; 721  : 
; 722  :         res_float = cpu_float_check1 + cpu_float_check2 + i;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	addss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	cvtsi2ss xmm1, DWORD PTR _i$1[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _res_float$[ebp], xmm0

; 723  :         res_float = cpu_float_check1 - cpu_float_check2 + i;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	subss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	cvtsi2ss xmm1, DWORD PTR _i$1[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _res_float$[ebp], xmm0

; 724  :         res_float = cpu_float_check1 * cpu_float_check2 + i;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	mulss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	cvtsi2ss xmm1, DWORD PTR _i$1[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _res_float$[ebp], xmm0

; 725  :         res_float = cpu_float_check1 / cpu_float_check2 + i;

	movss	xmm0, DWORD PTR _cpu_float_check1$[ebp]
	divss	xmm0, DWORD PTR _cpu_float_check2$[ebp]
	cvtsi2ss xmm1, DWORD PTR _i$1[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _res_float$[ebp], xmm0

; 726  : 
; 727  :         res_char = cpu_char_check1 + cpu_char_check2 + i;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	add	ecx, eax
	mov	BYTE PTR _res_char$[ebp], cl

; 728  :         res_char = cpu_char_check1 - cpu_char_check2 + i;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR _res_char$[ebp], al

; 729  :         res_char = cpu_char_check1 * cpu_char_check2 + i;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	imul	eax, ecx
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR _res_char$[ebp], al

; 730  :         res_char = cpu_char_check1 / cpu_char_check2 + i;

	movsx	eax, BYTE PTR _cpu_char_check1$[ebp]
	movsx	ecx, BYTE PTR _cpu_char_check2$[ebp]
	cdq
	idiv	ecx
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR _res_char$[ebp], al

; 731  :     }

	jmp	$LN2@cpu_overcl
$LN3@cpu_overcl:

; 732  :     double end_time_ = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _end_time_$[ebp], xmm0

; 733  :     double time_ = end_time_ - start_time_;

	movsd	xmm0, QWORD PTR _end_time_$[ebp]
	subsd	xmm0, QWORD PTR _start_time_$[ebp]
	movsd	QWORD PTR _time_$[ebp], xmm0

; 734  :     time__ = time__ - time_;

	movsd	xmm0, QWORD PTR _time__$[ebp]
	subsd	xmm0, QWORD PTR _time_$[ebp]
	movsd	QWORD PTR _time__$[ebp], xmm0

; 735  :     empty_time = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ?empty_time@@3NA, xmm0

; 736  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cpu_overclocking@@YAXXZ ENDP				; cpu_overclocking
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?search_maximum@@YAXXZ
_TEXT	SEGMENT
_l$1 = -312						; size = 4
_k$2 = -300						; size = 4
_prom$3 = -288						; size = 8
_i$4 = -272						; size = 4
_j$5 = -260						; size = 4
_percent$ = -248					; size = 8
_max_time$ = -232					; size = 200
_max_num$ = -24						; size = 8
_index_max$ = -8					; size = 4
?search_maximum@@YAXXZ PROC				; search_maximum, COMDAT

; 600  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 601  :     int index_max = 0;

	mov	DWORD PTR _index_max$[ebp], 0

; 602  :     double max_num = time_standart[0];

	mov	eax, 8
	imul	ecx, eax, 0
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[ecx]
	movsd	QWORD PTR _max_num$[ebp], xmm0

; 603  :     double max_time[N];
; 604  :     double percent;
; 605  :     for (int j = 0; j < N; j++)

	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN4@search_max
$LN2@search_max:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN4@search_max:
	cmp	DWORD PTR _j$5[ebp], 25			; 00000019H
	jge	$LN3@search_max

; 606  :     {
; 607  :         for (int i = 0; i < N; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN7@search_max
$LN5@search_max:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN7@search_max:
	cmp	DWORD PTR _i$4[ebp], 25			; 00000019H
	jge	SHORT $LN6@search_max

; 608  :         {
; 609  :             if (time_standart[i] >= max_num)

	mov	eax, DWORD PTR _i$4[ebp]
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax*8]
	comisd	xmm0, QWORD PTR _max_num$[ebp]
	jb	SHORT $LN14@search_max

; 610  :             {
; 611  :                 max_num = time_standart[i];

	mov	eax, DWORD PTR _i$4[ebp]
	movsd	xmm0, QWORD PTR ?time_standart@@3PANA[eax*8]
	movsd	QWORD PTR _max_num$[ebp], xmm0

; 612  :                 index_max = i;

	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR _index_max$[ebp], eax
$LN14@search_max:

; 613  :             }
; 614  :         }

	jmp	SHORT $LN5@search_max
$LN6@search_max:

; 615  :         max_time[j] = max_num;

	mov	eax, DWORD PTR _j$5[ebp]
	movsd	xmm0, QWORD PTR _max_num$[ebp]
	movsd	QWORD PTR _max_time$[ebp+eax*8], xmm0

; 616  :         time_standart[index_max] = 0;

	mov	eax, DWORD PTR _index_max$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR ?time_standart@@3PANA[eax*8], xmm0

; 617  :         max_num = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _max_num$[ebp], xmm0

; 618  :         cout << name_operator[index_max] << "   ";

	push	OFFSET ??_C@_03NDEAONJP@?5?5?5@
	mov	eax, DWORD PTR _index_max$[ebp]
	movzx	ecx, BYTE PTR ?name_operator@@3PADA[eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 619  :         if (name_type[index_max] == 'i')

	mov	eax, DWORD PTR _index_max$[ebp]
	movsx	ecx, BYTE PTR ?name_type@@3PADA[eax]
	cmp	ecx, 105				; 00000069H
	jne	SHORT $LN15@search_max

; 620  :         {
; 621  :             cout << "int      ";

	push	OFFSET ??_C@_09IJBHKDLN@int?5?5?5?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 622  :         }

	jmp	$LN23@search_max
$LN15@search_max:

; 623  :         else if(name_type[index_max] == 'd')

	mov	eax, DWORD PTR _index_max$[ebp]
	movsx	ecx, BYTE PTR ?name_type@@3PADA[eax]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN17@search_max

; 624  :         {
; 625  :             cout << "double   ";

	push	OFFSET ??_C@_09JMCFEFKO@double?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 626  :         }

	jmp	SHORT $LN23@search_max
$LN17@search_max:

; 627  :         else if (name_type[index_max] == 'l')

	mov	eax, DWORD PTR _index_max$[ebp]
	movsx	ecx, BYTE PTR ?name_type@@3PADA[eax]
	cmp	ecx, 108				; 0000006cH
	jne	SHORT $LN19@search_max

; 628  :         {
; 629  :             cout << "long   ";

	push	OFFSET ??_C@_07HEHAKBGF@long?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 630  :         }

	jmp	SHORT $LN23@search_max
$LN19@search_max:

; 631  :         else if (name_type[index_max] == 'f')

	mov	eax, DWORD PTR _index_max$[ebp]
	movsx	ecx, BYTE PTR ?name_type@@3PADA[eax]
	cmp	ecx, 102				; 00000066H
	jne	SHORT $LN21@search_max

; 632  :         {
; 633  :             cout << "float   ";

	push	OFFSET ??_C@_08ODEMNAL@float?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 634  :         }

	jmp	SHORT $LN23@search_max
$LN21@search_max:

; 635  :         else if (name_type[index_max] == 'c')

	mov	eax, DWORD PTR _index_max$[ebp]
	movsx	ecx, BYTE PTR ?name_type@@3PADA[eax]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN23@search_max

; 636  :         {
; 637  :             cout << "char   ";

	push	OFFSET ??_C@_07DBKBCHGA@char?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN23@search_max:

; 638  :         }
; 639  :         cout << max_time[j] << ": ";

	push	OFFSET ??_C@_02LMMGGCAJ@?3?5@
	mov	esi, esp
	mov	eax, DWORD PTR _j$5[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR _max_time$[ebp+eax*8]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 640  :         percent = max_time[j] * 100 / max_time[0];

	mov	eax, DWORD PTR _j$5[ebp]
	movsd	xmm0, QWORD PTR _max_time$[ebp+eax*8]
	mulsd	xmm0, QWORD PTR __real@4059000000000000
	mov	ecx, 8
	imul	edx, ecx, 0
	divsd	xmm0, QWORD PTR _max_time$[ebp+edx]
	movsd	QWORD PTR _percent$[ebp], xmm0

; 641  :         double prom = 50 * percent / 100;

	movsd	xmm0, QWORD PTR __real@4049000000000000
	mulsd	xmm0, QWORD PTR _percent$[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR _prom$3[ebp], xmm0

; 642  :         for (int k = 0; k < prom; k++)

	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN10@search_max
$LN8@search_max:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 1
	mov	DWORD PTR _k$2[ebp], eax
$LN10@search_max:
	cvtsi2sd xmm0, DWORD PTR _k$2[ebp]
	movsd	xmm1, QWORD PTR _prom$3[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN9@search_max

; 643  :         {
; 644  :             cout << "#";

	push	OFFSET ??_C@_01IPJKGB@?$CD@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 645  :         }

	jmp	SHORT $LN8@search_max
$LN9@search_max:

; 646  :         for (int l = 0; l < 50 - prom; l++)

	mov	DWORD PTR _l$1[ebp], 0
	jmp	SHORT $LN13@search_max
$LN11@search_max:
	mov	eax, DWORD PTR _l$1[ebp]
	add	eax, 1
	mov	DWORD PTR _l$1[ebp], eax
$LN13@search_max:
	cvtsi2sd xmm0, DWORD PTR _l$1[ebp]
	movsd	xmm1, QWORD PTR __real@4049000000000000
	subsd	xmm1, QWORD PTR _prom$3[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN12@search_max

; 647  :         {
; 648  :             cout << " ";

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 649  :         }

	jmp	SHORT $LN11@search_max
$LN12@search_max:

; 650  :         cout << "   " << percent << " %";

	push	OFFSET ??_C@_02NAAALAOK@?5?$CF@
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _percent$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_03NDEAONJP@?5?5?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 651  :         cout << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 652  :     }

	jmp	$LN2@search_max
$LN3@search_max:

; 653  : 
; 654  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@search_max
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@search_max:
	DD	1
	DD	$LN26@search_max
$LN26@search_max:
	DD	-232					; ffffff18H
	DD	200					; 000000c8H
	DD	$LN25@search_max
$LN25@search_max:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?search_maximum@@YAXXZ ENDP				; search_maximum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_for_char@@YAHDDDDDDDDDD@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 1
_x2$ = 12						; size = 1
_x3$ = 16						; size = 1
_x4$ = 20						; size = 1
_x5$ = 24						; size = 1
_x6$ = 28						; size = 1
_x7$ = 32						; size = 1
_x8$ = 36						; size = 1
_x9$ = 40						; size = 1
_x10$ = 44						; size = 1
?appropriation_for_char@@YAHDDDDDDDDDD@Z PROC		; appropriation_for_char, COMDAT

; 578  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 579  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 580  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@appropriat
$LN2@appropriat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@appropriat:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	SHORT $LN3@appropriat

; 581  :     {
; 582  :         x1 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x1$[ebp], al

; 583  :         x2 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x2$[ebp], al

; 584  :         x3 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x3$[ebp], al

; 585  :         x4 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x4$[ebp], al

; 586  :         x5 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x5$[ebp], al

; 587  :         x6 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x6$[ebp], al

; 588  :         x7 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x7$[ebp], al

; 589  :         x8 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x8$[ebp], al

; 590  :         x9 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x9$[ebp], al

; 591  :         x10 = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _x10$[ebp], al

; 592  :     }

	jmp	SHORT $LN2@appropriat
$LN3@appropriat:

; 593  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 594  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 595  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 596  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_for_char@@YAHDDDDDDDDDD@Z ENDP		; appropriation_for_char
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_for_float@@YAHMMMMMMMMMM@Z
_TEXT	SEGMENT
_time$ = -56						; size = 4
_end_time$ = -44					; size = 4
_i$1 = -32						; size = 4
_c$ = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?appropriation_for_float@@YAHMMMMMMMMMM@Z PROC		; appropriation_for_float, COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 557  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 558  :     float c = 0.3f;

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _c$[ebp], xmm0

; 559  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@appropriat
$LN2@appropriat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@appropriat:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@appropriat

; 560  :     {
; 561  :         x1 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 562  :         x2 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 563  :         x3 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x3$[ebp], xmm0

; 564  :         x4 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x4$[ebp], xmm0

; 565  :         x5 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x5$[ebp], xmm0

; 566  :         x6 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x6$[ebp], xmm0

; 567  :         x7 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x7$[ebp], xmm0

; 568  :         x8 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x8$[ebp], xmm0

; 569  :         x9 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x9$[ebp], xmm0

; 570  :         x10 = i + c;

	cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
	addss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _x10$[ebp], xmm0

; 571  :     }

	jmp	$LN2@appropriat
$LN3@appropriat:

; 572  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 573  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 574  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 575  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_for_float@@YAHMMMMMMMMMM@Z ENDP		; appropriation_for_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_for_long@@YAHJJJJJJJJJJ@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?appropriation_for_long@@YAHJJJJJJJJJJ@Z PROC		; appropriation_for_long, COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 536  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 537  :     for (int i = 0; i < N_appropriation; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@appropriat
$LN2@appropriat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@appropriat:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@appropriat

; 538  :     {
; 539  :         x1 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 540  :         x2 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 541  :         x3 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 542  :         x4 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 543  :         x5 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 544  :         x6 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 545  :         x7 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 546  :         x8 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 547  :         x9 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 548  :         x10 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 549  :     }

	jmp	SHORT $LN2@appropriat
$LN3@appropriat:

; 550  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 551  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 552  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 553  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_for_long@@YAHJJJJJJJJJJ@Z ENDP		; appropriation_for_long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_for_double@@YAHNNNNNNNNNN@Z
_TEXT	SEGMENT
_time$ = -60						; size = 4
_end_time$ = -48					; size = 4
_i$1 = -36						; size = 4
_start_time$ = -24					; size = 4
_c$ = -12						; size = 8
_x1$ = 8						; size = 8
_x2$ = 16						; size = 8
_x3$ = 24						; size = 8
_x4$ = 32						; size = 8
_x5$ = 40						; size = 8
_x6$ = 48						; size = 8
_x7$ = 56						; size = 8
_x8$ = 64						; size = 8
_x9$ = 72						; size = 8
_x10$ = 80						; size = 8
?appropriation_for_double@@YAHNNNNNNNNNN@Z PROC		; appropriation_for_double, COMDAT

; 513  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 514  :     double c = 0.3;

	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR _c$[ebp], xmm0

; 515  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 516  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@appropriat
$LN2@appropriat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@appropriat:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@appropriat

; 517  :     {
; 518  :         x1 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x1$[ebp], xmm0

; 519  :         x2 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x2$[ebp], xmm0

; 520  :         x3 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x3$[ebp], xmm0

; 521  :         x4 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x4$[ebp], xmm0

; 522  :         x5 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x5$[ebp], xmm0

; 523  :         x6 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x6$[ebp], xmm0

; 524  :         x7 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x7$[ebp], xmm0

; 525  :         x8 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x8$[ebp], xmm0

; 526  :         x9 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x9$[ebp], xmm0

; 527  :         x10 = i + c;

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	addsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR _x10$[ebp], xmm0

; 528  :     }

	jmp	$LN2@appropriat
$LN3@appropriat:

; 529  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 530  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 531  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 532  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_for_double@@YAHNNNNNNNNNN@Z ENDP		; appropriation_for_double
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?appropriation_for_int@@YAHHHHHHHHHHH@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?appropriation_for_int@@YAHHHHHHHHHHH@Z PROC		; appropriation_for_int, COMDAT

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 493  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 494  :     for (int i = 0; i < N_appropriation; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@appropriat
$LN2@appropriat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@appropriat:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@appropriat

; 495  :     {
; 496  :         x1 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 497  :         x2 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 498  :         x3 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 499  :         x4 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 500  :         x5 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 501  :         x6 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 502  :         x7 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 503  :         x8 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 504  :         x9 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 505  :         x10 = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 506  :     }

	jmp	SHORT $LN2@appropriat
$LN3@appropriat:

; 507  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 508  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 509  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 510  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?appropriation_for_int@@YAHHHHHHHHHHH@Z ENDP		; appropriation_for_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_for_char@@YAHDDDDDDDDDD@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 1
_x2$ = 12						; size = 1
_x3$ = 16						; size = 1
_x4$ = 20						; size = 1
_x5$ = 24						; size = 1
_x6$ = 28						; size = 1
_x7$ = 32						; size = 1
_x8$ = 36						; size = 1
_x9$ = 40						; size = 1
_x10$ = 44						; size = 1
?division_for_char@@YAHDDDDDDDDDD@Z PROC		; division_for_char, COMDAT

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 470  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 471  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@division_f
$LN2@division_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@division_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@division_f

; 472  :     {
; 473  : 
; 474  :         if (x3 != 0) x1 = x2 / x3;

	movsx	eax, BYTE PTR _x3$[ebp]
	test	eax, eax
	je	SHORT $LN5@division_f
	movsx	eax, BYTE PTR _x2$[ebp]
	movsx	ecx, BYTE PTR _x3$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x1$[ebp], al
$LN5@division_f:

; 475  :         if (x4 != 0) x2 = x3 / x4;

	movsx	eax, BYTE PTR _x4$[ebp]
	test	eax, eax
	je	SHORT $LN6@division_f
	movsx	eax, BYTE PTR _x3$[ebp]
	movsx	ecx, BYTE PTR _x4$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x2$[ebp], al
$LN6@division_f:

; 476  :         if (x5 != 0) x3 = x4 / x5;

	movsx	eax, BYTE PTR _x5$[ebp]
	test	eax, eax
	je	SHORT $LN7@division_f
	movsx	eax, BYTE PTR _x4$[ebp]
	movsx	ecx, BYTE PTR _x5$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x3$[ebp], al
$LN7@division_f:

; 477  :         if (x6 != 0) x4 = x5 / x6;

	movsx	eax, BYTE PTR _x6$[ebp]
	test	eax, eax
	je	SHORT $LN8@division_f
	movsx	eax, BYTE PTR _x5$[ebp]
	movsx	ecx, BYTE PTR _x6$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x4$[ebp], al
$LN8@division_f:

; 478  :         if (x7 != 0) x5 = x6 / x7;

	movsx	eax, BYTE PTR _x7$[ebp]
	test	eax, eax
	je	SHORT $LN9@division_f
	movsx	eax, BYTE PTR _x6$[ebp]
	movsx	ecx, BYTE PTR _x7$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x5$[ebp], al
$LN9@division_f:

; 479  :         if (x8 != 0) x6 = x7 / x8;

	movsx	eax, BYTE PTR _x8$[ebp]
	test	eax, eax
	je	SHORT $LN10@division_f
	movsx	eax, BYTE PTR _x7$[ebp]
	movsx	ecx, BYTE PTR _x8$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x6$[ebp], al
$LN10@division_f:

; 480  :         if (x9 != 0) x7 = x8 / x9;

	movsx	eax, BYTE PTR _x9$[ebp]
	test	eax, eax
	je	SHORT $LN11@division_f
	movsx	eax, BYTE PTR _x8$[ebp]
	movsx	ecx, BYTE PTR _x9$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x7$[ebp], al
$LN11@division_f:

; 481  :         if (x10 != 0) x8 = x9 / x10;

	movsx	eax, BYTE PTR _x10$[ebp]
	test	eax, eax
	je	SHORT $LN12@division_f
	movsx	eax, BYTE PTR _x9$[ebp]
	movsx	ecx, BYTE PTR _x10$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x8$[ebp], al
$LN12@division_f:

; 482  :         if (x1 != 0) x9 = x10 / x1;

	movsx	eax, BYTE PTR _x1$[ebp]
	test	eax, eax
	je	SHORT $LN13@division_f
	movsx	eax, BYTE PTR _x10$[ebp]
	movsx	ecx, BYTE PTR _x1$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x9$[ebp], al
$LN13@division_f:

; 483  :         if (x2 != 0) x10 = x1 / x2;

	movsx	eax, BYTE PTR _x2$[ebp]
	test	eax, eax
	je	SHORT $LN14@division_f
	movsx	eax, BYTE PTR _x1$[ebp]
	movsx	ecx, BYTE PTR _x2$[ebp]
	cdq
	idiv	ecx
	mov	BYTE PTR _x10$[ebp], al
$LN14@division_f:

; 484  :     }

	jmp	$LN2@division_f
$LN3@division_f:

; 485  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 486  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 487  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 488  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_for_char@@YAHDDDDDDDDDD@Z ENDP		; division_for_char
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_for_float@@YAHMMMMMMMMMM@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?division_for_float@@YAHMMMMMMMMMM@Z PROC		; division_for_float, COMDAT

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 449  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 450  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@division_f
$LN2@division_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@division_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@division_f

; 451  :     {
; 452  :         x1 = x2 / x3;

	movss	xmm0, DWORD PTR _x2$[ebp]
	divss	xmm0, DWORD PTR _x3$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 453  :         x2 = x3 / x4;

	movss	xmm0, DWORD PTR _x3$[ebp]
	divss	xmm0, DWORD PTR _x4$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 454  :         x3 = x4 / x5;

	movss	xmm0, DWORD PTR _x4$[ebp]
	divss	xmm0, DWORD PTR _x5$[ebp]
	movss	DWORD PTR _x3$[ebp], xmm0

; 455  :         x4 = x5 / x6;

	movss	xmm0, DWORD PTR _x5$[ebp]
	divss	xmm0, DWORD PTR _x6$[ebp]
	movss	DWORD PTR _x4$[ebp], xmm0

; 456  :         x5 = x6 / x7;

	movss	xmm0, DWORD PTR _x6$[ebp]
	divss	xmm0, DWORD PTR _x7$[ebp]
	movss	DWORD PTR _x5$[ebp], xmm0

; 457  :         x6 = x7 / x8;

	movss	xmm0, DWORD PTR _x7$[ebp]
	divss	xmm0, DWORD PTR _x8$[ebp]
	movss	DWORD PTR _x6$[ebp], xmm0

; 458  :         x7 = x8 / x9;

	movss	xmm0, DWORD PTR _x8$[ebp]
	divss	xmm0, DWORD PTR _x9$[ebp]
	movss	DWORD PTR _x7$[ebp], xmm0

; 459  :         x8 = x9 / x10;

	movss	xmm0, DWORD PTR _x9$[ebp]
	divss	xmm0, DWORD PTR _x10$[ebp]
	movss	DWORD PTR _x8$[ebp], xmm0

; 460  :         x9 = x10 / x1;

	movss	xmm0, DWORD PTR _x10$[ebp]
	divss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x9$[ebp], xmm0

; 461  :         x10 = x1 / x2;

	movss	xmm0, DWORD PTR _x1$[ebp]
	divss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR _x10$[ebp], xmm0

; 462  :     }

	jmp	$LN2@division_f
$LN3@division_f:

; 463  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 464  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 465  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 466  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_for_float@@YAHMMMMMMMMMM@Z ENDP		; division_for_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_for_long@@YAHJJJJJJJJJJ@Z
_TEXT	SEGMENT
_time$ = -164						; size = 4
_end_time$ = -152					; size = 4
_i$1 = -140						; size = 4
_start_time$ = -128					; size = 4
_t_x10$ = -116						; size = 4
_t_x9$ = -104						; size = 4
_t_x8$ = -92						; size = 4
_t_x7$ = -80						; size = 4
_t_x6$ = -68						; size = 4
_t_x5$ = -56						; size = 4
_t_x4$ = -44						; size = 4
_t_x3$ = -32						; size = 4
_t_x2$ = -20						; size = 4
_t_x1$ = -8						; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?division_for_long@@YAHJJJJJJJJJJ@Z PROC		; division_for_long, COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 427  :     long t_x1 = x1, t_x2 = x2, t_x3 = x3, t_x4 = x4, t_x5 = x5, t_x6 = x6, t_x7 = x7, t_x8 = x8, t_x9 = x9, t_x10 = x10;

	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _t_x1$[ebp], eax
	mov	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _t_x2$[ebp], eax
	mov	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _t_x3$[ebp], eax
	mov	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _t_x4$[ebp], eax
	mov	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _t_x5$[ebp], eax
	mov	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _t_x6$[ebp], eax
	mov	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _t_x7$[ebp], eax
	mov	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _t_x8$[ebp], eax
	mov	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _t_x9$[ebp], eax
	mov	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _t_x10$[ebp], eax

; 428  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 429  : 
; 430  :     for (int i = 0; i < N_standart; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@division_f
$LN2@division_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@division_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	SHORT $LN3@division_f

; 431  :         t_x1 = x2 / x3;

	mov	eax, DWORD PTR _x2$[ebp]
	cdq
	idiv	DWORD PTR _x3$[ebp]
	mov	DWORD PTR _t_x1$[ebp], eax

; 432  :         t_x2 = x3 / x4;

	mov	eax, DWORD PTR _x3$[ebp]
	cdq
	idiv	DWORD PTR _x4$[ebp]
	mov	DWORD PTR _t_x2$[ebp], eax

; 433  :         t_x3 = x4 / x5;

	mov	eax, DWORD PTR _x4$[ebp]
	cdq
	idiv	DWORD PTR _x5$[ebp]
	mov	DWORD PTR _t_x3$[ebp], eax

; 434  :         t_x4 = x5 / x6;

	mov	eax, DWORD PTR _x5$[ebp]
	cdq
	idiv	DWORD PTR _x6$[ebp]
	mov	DWORD PTR _t_x4$[ebp], eax

; 435  :         t_x5 = x6 / x7;

	mov	eax, DWORD PTR _x6$[ebp]
	cdq
	idiv	DWORD PTR _x7$[ebp]
	mov	DWORD PTR _t_x5$[ebp], eax

; 436  :         t_x6 = x7 / x8;

	mov	eax, DWORD PTR _x7$[ebp]
	cdq
	idiv	DWORD PTR _x8$[ebp]
	mov	DWORD PTR _t_x6$[ebp], eax

; 437  :         t_x7 = x8 / x9;

	mov	eax, DWORD PTR _x8$[ebp]
	cdq
	idiv	DWORD PTR _x9$[ebp]
	mov	DWORD PTR _t_x7$[ebp], eax

; 438  :         t_x8 = x9 / x10;

	mov	eax, DWORD PTR _x9$[ebp]
	cdq
	idiv	DWORD PTR _x10$[ebp]
	mov	DWORD PTR _t_x8$[ebp], eax

; 439  :         t_x9 = x10 / x1;

	mov	eax, DWORD PTR _x10$[ebp]
	cdq
	idiv	DWORD PTR _x1$[ebp]
	mov	DWORD PTR _t_x9$[ebp], eax

; 440  :         t_x10 = x1 / x2;

	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	idiv	DWORD PTR _x2$[ebp]
	mov	DWORD PTR _t_x10$[ebp], eax

; 441  :     }

	jmp	$LN2@division_f
$LN3@division_f:

; 442  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 443  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 444  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 445  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_for_long@@YAHJJJJJJJJJJ@Z ENDP		; division_for_long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_for_double@@YAHNNNNNNNNNN@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 8
_x2$ = 16						; size = 8
_x3$ = 24						; size = 8
_x4$ = 32						; size = 8
_x5$ = 40						; size = 8
_x6$ = 48						; size = 8
_x7$ = 56						; size = 8
_x8$ = 64						; size = 8
_x9$ = 72						; size = 8
_x10$ = 80						; size = 8
?division_for_double@@YAHNNNNNNNNNN@Z PROC		; division_for_double, COMDAT

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 406  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 407  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@division_f
$LN2@division_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@division_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@division_f

; 408  :     {
; 409  :         x1 = x2 / x3;

	movsd	xmm0, QWORD PTR _x2$[ebp]
	divsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR _x1$[ebp], xmm0

; 410  :         x2 = x3 / x4;

	movsd	xmm0, QWORD PTR _x3$[ebp]
	divsd	xmm0, QWORD PTR _x4$[ebp]
	movsd	QWORD PTR _x2$[ebp], xmm0

; 411  :         x3 = x4 / x5;

	movsd	xmm0, QWORD PTR _x4$[ebp]
	divsd	xmm0, QWORD PTR _x5$[ebp]
	movsd	QWORD PTR _x3$[ebp], xmm0

; 412  :         x4 = x5 / x6;

	movsd	xmm0, QWORD PTR _x5$[ebp]
	divsd	xmm0, QWORD PTR _x6$[ebp]
	movsd	QWORD PTR _x4$[ebp], xmm0

; 413  :         x5 = x6 / x7;

	movsd	xmm0, QWORD PTR _x6$[ebp]
	divsd	xmm0, QWORD PTR _x7$[ebp]
	movsd	QWORD PTR _x5$[ebp], xmm0

; 414  :         x6 = x7 / x8;

	movsd	xmm0, QWORD PTR _x7$[ebp]
	divsd	xmm0, QWORD PTR _x8$[ebp]
	movsd	QWORD PTR _x6$[ebp], xmm0

; 415  :         x7 = x8 / x9;

	movsd	xmm0, QWORD PTR _x8$[ebp]
	divsd	xmm0, QWORD PTR _x9$[ebp]
	movsd	QWORD PTR _x7$[ebp], xmm0

; 416  :         x8 = x9 / x10;

	movsd	xmm0, QWORD PTR _x9$[ebp]
	divsd	xmm0, QWORD PTR _x10$[ebp]
	movsd	QWORD PTR _x8$[ebp], xmm0

; 417  :         x9 = x10 / x1;

	movsd	xmm0, QWORD PTR _x10$[ebp]
	divsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR _x9$[ebp], xmm0

; 418  :         x10 = x1 / x2;

	movsd	xmm0, QWORD PTR _x1$[ebp]
	divsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR _x10$[ebp], xmm0

; 419  :     }

	jmp	$LN2@division_f
$LN3@division_f:

; 420  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 421  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 422  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 423  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_for_double@@YAHNNNNNNNNNN@Z ENDP		; division_for_double
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?division_for_int@@YAHHHHHHHHHHH@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?division_for_int@@YAHHHHHHHHHHH@Z PROC			; division_for_int, COMDAT

; 384  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 385  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 386  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@division_f
$LN2@division_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@division_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@division_f

; 387  :     {
; 388  :         if (x3 != 0) x1 = x2 / x3;

	cmp	DWORD PTR _x3$[ebp], 0
	je	SHORT $LN5@division_f
	mov	eax, DWORD PTR _x2$[ebp]
	cdq
	idiv	DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
$LN5@division_f:

; 389  :         if (x4 != 0) x2 = x3 / x4;

	cmp	DWORD PTR _x4$[ebp], 0
	je	SHORT $LN6@division_f
	mov	eax, DWORD PTR _x3$[ebp]
	cdq
	idiv	DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax
$LN6@division_f:

; 390  :         if (x5 != 0) x3 = x4 / x5;

	cmp	DWORD PTR _x5$[ebp], 0
	je	SHORT $LN7@division_f
	mov	eax, DWORD PTR _x4$[ebp]
	cdq
	idiv	DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax
$LN7@division_f:

; 391  :         if (x6 != 0) x4 = x5 / x6;

	cmp	DWORD PTR _x6$[ebp], 0
	je	SHORT $LN8@division_f
	mov	eax, DWORD PTR _x5$[ebp]
	cdq
	idiv	DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax
$LN8@division_f:

; 392  :         if (x7 != 0) x5 = x6 / x7;

	cmp	DWORD PTR _x7$[ebp], 0
	je	SHORT $LN9@division_f
	mov	eax, DWORD PTR _x6$[ebp]
	cdq
	idiv	DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax
$LN9@division_f:

; 393  :         if (x8 != 0) x6 = x7 / x8;

	cmp	DWORD PTR _x8$[ebp], 0
	je	SHORT $LN10@division_f
	mov	eax, DWORD PTR _x7$[ebp]
	cdq
	idiv	DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax
$LN10@division_f:

; 394  :         if (x9 != 0) x7 = x8 / x9;

	cmp	DWORD PTR _x9$[ebp], 0
	je	SHORT $LN11@division_f
	mov	eax, DWORD PTR _x8$[ebp]
	cdq
	idiv	DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax
$LN11@division_f:

; 395  :         if (x10 != 0) x8 = x9 / x10;

	cmp	DWORD PTR _x10$[ebp], 0
	je	SHORT $LN12@division_f
	mov	eax, DWORD PTR _x9$[ebp]
	cdq
	idiv	DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax
$LN12@division_f:

; 396  :         if (x1 != 0) x9 = x10 / x1;

	cmp	DWORD PTR _x1$[ebp], 0
	je	SHORT $LN13@division_f
	mov	eax, DWORD PTR _x10$[ebp]
	cdq
	idiv	DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax
$LN13@division_f:

; 397  :         if (x2 != 0) x10 = x1 / x2;

	cmp	DWORD PTR _x2$[ebp], 0
	je	SHORT $LN14@division_f
	mov	eax, DWORD PTR _x1$[ebp]
	cdq
	idiv	DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax
$LN14@division_f:

; 398  :     }

	jmp	$LN2@division_f
$LN3@division_f:

; 399  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 400  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 401  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?division_for_int@@YAHHHHHHHHHHH@Z ENDP			; division_for_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_for_char@@YAHDDDDDDDDDD@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 1
_x2$ = 12						; size = 1
_x3$ = 16						; size = 1
_x4$ = 20						; size = 1
_x5$ = 24						; size = 1
_x6$ = 28						; size = 1
_x7$ = 32						; size = 1
_x8$ = 36						; size = 1
_x9$ = 40						; size = 1
_x10$ = 44						; size = 1
?multiplication_for_char@@YAHDDDDDDDDDD@Z PROC		; multiplication_for_char, COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 363  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 364  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@multiplica
$LN2@multiplica:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@multiplica:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@multiplica

; 365  :     {
; 366  :         x1 = x2 * x3;

	movsx	eax, BYTE PTR _x2$[ebp]
	movsx	ecx, BYTE PTR _x3$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x1$[ebp], al

; 367  :         x2 = x3 * x4;

	movsx	eax, BYTE PTR _x3$[ebp]
	movsx	ecx, BYTE PTR _x4$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x2$[ebp], al

; 368  :         x3 = x4 * x5;

	movsx	eax, BYTE PTR _x4$[ebp]
	movsx	ecx, BYTE PTR _x5$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x3$[ebp], al

; 369  :         x4 = x5 * x6;

	movsx	eax, BYTE PTR _x5$[ebp]
	movsx	ecx, BYTE PTR _x6$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x4$[ebp], al

; 370  :         x5 = x6 * x7;

	movsx	eax, BYTE PTR _x6$[ebp]
	movsx	ecx, BYTE PTR _x7$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x5$[ebp], al

; 371  :         x6 = x7 * x8;

	movsx	eax, BYTE PTR _x7$[ebp]
	movsx	ecx, BYTE PTR _x8$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x6$[ebp], al

; 372  :         x7 = x8 * x9;

	movsx	eax, BYTE PTR _x8$[ebp]
	movsx	ecx, BYTE PTR _x9$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x7$[ebp], al

; 373  :         x8 = x9 * x10;

	movsx	eax, BYTE PTR _x9$[ebp]
	movsx	ecx, BYTE PTR _x10$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x8$[ebp], al

; 374  :         x9 = x10 * x1;

	movsx	eax, BYTE PTR _x10$[ebp]
	movsx	ecx, BYTE PTR _x1$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x9$[ebp], al

; 375  :         x10 = x1 * x2;

	movsx	eax, BYTE PTR _x1$[ebp]
	movsx	ecx, BYTE PTR _x2$[ebp]
	imul	eax, ecx
	mov	BYTE PTR _x10$[ebp], al

; 376  :     }

	jmp	$LN2@multiplica
$LN3@multiplica:

; 377  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 378  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 379  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 380  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_for_char@@YAHDDDDDDDDDD@Z ENDP		; multiplication_for_char
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_for_float@@YAHMMMMMMMMMM@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?multiplication_for_float@@YAHMMMMMMMMMM@Z PROC		; multiplication_for_float, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 342  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 343  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@multiplica
$LN2@multiplica:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@multiplica:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@multiplica

; 344  :     {
; 345  :         x1 = x2 * x3;

	movss	xmm0, DWORD PTR _x2$[ebp]
	mulss	xmm0, DWORD PTR _x3$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 346  :         x2 = x3 * x4;

	movss	xmm0, DWORD PTR _x3$[ebp]
	mulss	xmm0, DWORD PTR _x4$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 347  :         x3 = x4 * x5;

	movss	xmm0, DWORD PTR _x4$[ebp]
	mulss	xmm0, DWORD PTR _x5$[ebp]
	movss	DWORD PTR _x3$[ebp], xmm0

; 348  :         x4 = x5 * x6;

	movss	xmm0, DWORD PTR _x5$[ebp]
	mulss	xmm0, DWORD PTR _x6$[ebp]
	movss	DWORD PTR _x4$[ebp], xmm0

; 349  :         x5 = x6 * x7;

	movss	xmm0, DWORD PTR _x6$[ebp]
	mulss	xmm0, DWORD PTR _x7$[ebp]
	movss	DWORD PTR _x5$[ebp], xmm0

; 350  :         x6 = x7 * x8;

	movss	xmm0, DWORD PTR _x7$[ebp]
	mulss	xmm0, DWORD PTR _x8$[ebp]
	movss	DWORD PTR _x6$[ebp], xmm0

; 351  :         x7 = x8 * x9;

	movss	xmm0, DWORD PTR _x8$[ebp]
	mulss	xmm0, DWORD PTR _x9$[ebp]
	movss	DWORD PTR _x7$[ebp], xmm0

; 352  :         x8 = x9 * x10;

	movss	xmm0, DWORD PTR _x9$[ebp]
	mulss	xmm0, DWORD PTR _x10$[ebp]
	movss	DWORD PTR _x8$[ebp], xmm0

; 353  :         x9 = x10 * x1;

	movss	xmm0, DWORD PTR _x10$[ebp]
	mulss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x9$[ebp], xmm0

; 354  :         x10 = x1 * x2;

	movss	xmm0, DWORD PTR _x1$[ebp]
	mulss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR _x10$[ebp], xmm0

; 355  :     }

	jmp	$LN2@multiplica
$LN3@multiplica:

; 356  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 357  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 358  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 359  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_for_float@@YAHMMMMMMMMMM@Z ENDP		; multiplication_for_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_for_long@@YAHJJJJJJJJJJ@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?multiplication_for_long@@YAHJJJJJJJJJJ@Z PROC		; multiplication_for_long, COMDAT

; 320  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 321  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 322  :     for (int i = 0; i < N_multiplication; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@multiplica
$LN2@multiplica:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@multiplica:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@multiplica

; 323  :     {
; 324  :         x1 = x2 * x3;

	mov	eax, DWORD PTR _x2$[ebp]
	imul	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 325  :         x2 = x3 * x4;

	mov	eax, DWORD PTR _x3$[ebp]
	imul	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 326  :         x3 = x4 * x5;

	mov	eax, DWORD PTR _x4$[ebp]
	imul	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 327  :         x4 = x5 * x6;

	mov	eax, DWORD PTR _x5$[ebp]
	imul	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 328  :         x5 = x6 * x7;

	mov	eax, DWORD PTR _x6$[ebp]
	imul	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 329  :         x6 = x7 * x8;

	mov	eax, DWORD PTR _x7$[ebp]
	imul	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 330  :         x7 = x8 * x9;

	mov	eax, DWORD PTR _x8$[ebp]
	imul	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 331  :         x8 = x9 * x10;

	mov	eax, DWORD PTR _x9$[ebp]
	imul	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 332  :         x9 = x10 * x1;

	mov	eax, DWORD PTR _x10$[ebp]
	imul	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 333  :         x10 = x1 * x2;

	mov	eax, DWORD PTR _x1$[ebp]
	imul	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 334  :     }

	jmp	SHORT $LN2@multiplica
$LN3@multiplica:

; 335  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 336  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 337  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_for_long@@YAHJJJJJJJJJJ@Z ENDP		; multiplication_for_long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_for_double@@YAHNNNNNNNNNN@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 8
_x2$ = 16						; size = 8
_x3$ = 24						; size = 8
_x4$ = 32						; size = 8
_x5$ = 40						; size = 8
_x6$ = 48						; size = 8
_x7$ = 56						; size = 8
_x8$ = 64						; size = 8
_x9$ = 72						; size = 8
_x10$ = 80						; size = 8
?multiplication_for_double@@YAHNNNNNNNNNN@Z PROC	; multiplication_for_double, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 300  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 301  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@multiplica
$LN2@multiplica:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@multiplica:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@multiplica

; 302  :     {
; 303  :         x1 = x2 * x3;

	movsd	xmm0, QWORD PTR _x2$[ebp]
	mulsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR _x1$[ebp], xmm0

; 304  :         x2 = x3 * x4;

	movsd	xmm0, QWORD PTR _x3$[ebp]
	mulsd	xmm0, QWORD PTR _x4$[ebp]
	movsd	QWORD PTR _x2$[ebp], xmm0

; 305  :         x3 = x4 * x5;

	movsd	xmm0, QWORD PTR _x4$[ebp]
	mulsd	xmm0, QWORD PTR _x5$[ebp]
	movsd	QWORD PTR _x3$[ebp], xmm0

; 306  :         x4 = x5 * x6;

	movsd	xmm0, QWORD PTR _x5$[ebp]
	mulsd	xmm0, QWORD PTR _x6$[ebp]
	movsd	QWORD PTR _x4$[ebp], xmm0

; 307  :         x5 = x6 * x7;

	movsd	xmm0, QWORD PTR _x6$[ebp]
	mulsd	xmm0, QWORD PTR _x7$[ebp]
	movsd	QWORD PTR _x5$[ebp], xmm0

; 308  :         x6 = x7 * x8;

	movsd	xmm0, QWORD PTR _x7$[ebp]
	mulsd	xmm0, QWORD PTR _x8$[ebp]
	movsd	QWORD PTR _x6$[ebp], xmm0

; 309  :         x7 = x8 * x9;

	movsd	xmm0, QWORD PTR _x8$[ebp]
	mulsd	xmm0, QWORD PTR _x9$[ebp]
	movsd	QWORD PTR _x7$[ebp], xmm0

; 310  :         x8 = x9 * x10;

	movsd	xmm0, QWORD PTR _x9$[ebp]
	mulsd	xmm0, QWORD PTR _x10$[ebp]
	movsd	QWORD PTR _x8$[ebp], xmm0

; 311  :         x9 = x10 * x1;

	movsd	xmm0, QWORD PTR _x10$[ebp]
	mulsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR _x9$[ebp], xmm0

; 312  :         x10 = x1 * x2;

	movsd	xmm0, QWORD PTR _x1$[ebp]
	mulsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR _x10$[ebp], xmm0

; 313  :     }

	jmp	$LN2@multiplica
$LN3@multiplica:

; 314  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 315  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 316  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 317  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_for_double@@YAHNNNNNNNNNN@Z ENDP	; multiplication_for_double
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?multiplication_for_int@@YAHHHHHHHHHHH@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?multiplication_for_int@@YAHHHHHHHHHHH@Z PROC		; multiplication_for_int, COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 279  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 280  :     for (int i = 0; i < N_multiplication; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@multiplica
$LN2@multiplica:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@multiplica:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@multiplica

; 281  :     {
; 282  :         x1 = x2 * x3;

	mov	eax, DWORD PTR _x2$[ebp]
	imul	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 283  :         x2 = x3 * x4;

	mov	eax, DWORD PTR _x3$[ebp]
	imul	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 284  :         x3 = x4 * x5;

	mov	eax, DWORD PTR _x4$[ebp]
	imul	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 285  :         x4 = x5 * x6;

	mov	eax, DWORD PTR _x5$[ebp]
	imul	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 286  :         x5 = x6 * x7;

	mov	eax, DWORD PTR _x6$[ebp]
	imul	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 287  :         x6 = x7 * x8;

	mov	eax, DWORD PTR _x7$[ebp]
	imul	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 288  :         x7 = x8 * x9;

	mov	eax, DWORD PTR _x8$[ebp]
	imul	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 289  :         x8 = x9 * x10;

	mov	eax, DWORD PTR _x9$[ebp]
	imul	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 290  :         x9 = x10 * x1;

	mov	eax, DWORD PTR _x10$[ebp]
	imul	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 291  :         x10 = x1 * x2;

	mov	eax, DWORD PTR _x1$[ebp]
	imul	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 292  :     }

	jmp	SHORT $LN2@multiplica
$LN3@multiplica:

; 293  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 294  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 295  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?multiplication_for_int@@YAHHHHHHHHHHH@Z ENDP		; multiplication_for_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_for_char@@YAHDDDDDDDDDD@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 1
_x2$ = 12						; size = 1
_x3$ = 16						; size = 1
_x4$ = 20						; size = 1
_x5$ = 24						; size = 1
_x6$ = 28						; size = 1
_x7$ = 32						; size = 1
_x8$ = 36						; size = 1
_x9$ = 40						; size = 1
_x10$ = 44						; size = 1
?minus_for_char@@YAHDDDDDDDDDD@Z PROC			; minus_for_char, COMDAT

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 257  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 258  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@minus_for_
$LN2@minus_for_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@minus_for_:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@minus_for_

; 259  :     {
; 260  :         x1 = x2 - x3;

	movsx	eax, BYTE PTR _x2$[ebp]
	movsx	ecx, BYTE PTR _x3$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x1$[ebp], al

; 261  :         x2 = x3 - x4;

	movsx	eax, BYTE PTR _x3$[ebp]
	movsx	ecx, BYTE PTR _x4$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x2$[ebp], al

; 262  :         x3 = x4 - x5;

	movsx	eax, BYTE PTR _x4$[ebp]
	movsx	ecx, BYTE PTR _x5$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x3$[ebp], al

; 263  :         x4 = x5 - x6;

	movsx	eax, BYTE PTR _x5$[ebp]
	movsx	ecx, BYTE PTR _x6$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x4$[ebp], al

; 264  :         x5 = x6 - x7;

	movsx	eax, BYTE PTR _x6$[ebp]
	movsx	ecx, BYTE PTR _x7$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x5$[ebp], al

; 265  :         x6 = x7 - x8;

	movsx	eax, BYTE PTR _x7$[ebp]
	movsx	ecx, BYTE PTR _x8$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x6$[ebp], al

; 266  :         x7 = x8 - x9;

	movsx	eax, BYTE PTR _x8$[ebp]
	movsx	ecx, BYTE PTR _x9$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x7$[ebp], al

; 267  :         x8 = x9 - x10;

	movsx	eax, BYTE PTR _x9$[ebp]
	movsx	ecx, BYTE PTR _x10$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x8$[ebp], al

; 268  :         x9 = x10 - x1;

	movsx	eax, BYTE PTR _x10$[ebp]
	movsx	ecx, BYTE PTR _x1$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x9$[ebp], al

; 269  :         x10 = x1 - x2;

	movsx	eax, BYTE PTR _x1$[ebp]
	movsx	ecx, BYTE PTR _x2$[ebp]
	sub	eax, ecx
	mov	BYTE PTR _x10$[ebp], al

; 270  :     }

	jmp	$LN2@minus_for_
$LN3@minus_for_:

; 271  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 272  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 273  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_for_char@@YAHDDDDDDDDDD@Z ENDP			; minus_for_char
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_for_float@@YAHMMMMMMMMMM@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?minus_for_float@@YAHMMMMMMMMMM@Z PROC			; minus_for_float, COMDAT

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 236  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 237  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@minus_for_
$LN2@minus_for_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@minus_for_:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@minus_for_

; 238  :     {
; 239  :         x1 = x2 - x3;

	movss	xmm0, DWORD PTR _x2$[ebp]
	subss	xmm0, DWORD PTR _x3$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 240  :         x2 = x3 - x4;

	movss	xmm0, DWORD PTR _x3$[ebp]
	subss	xmm0, DWORD PTR _x4$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 241  :         x3 = x4 - x5;

	movss	xmm0, DWORD PTR _x4$[ebp]
	subss	xmm0, DWORD PTR _x5$[ebp]
	movss	DWORD PTR _x3$[ebp], xmm0

; 242  :         x4 = x5 - x6;

	movss	xmm0, DWORD PTR _x5$[ebp]
	subss	xmm0, DWORD PTR _x6$[ebp]
	movss	DWORD PTR _x4$[ebp], xmm0

; 243  :         x5 = x6 - x7;

	movss	xmm0, DWORD PTR _x6$[ebp]
	subss	xmm0, DWORD PTR _x7$[ebp]
	movss	DWORD PTR _x5$[ebp], xmm0

; 244  :         x6 = x7 - x8;

	movss	xmm0, DWORD PTR _x7$[ebp]
	subss	xmm0, DWORD PTR _x8$[ebp]
	movss	DWORD PTR _x6$[ebp], xmm0

; 245  :         x7 = x8 - x9;

	movss	xmm0, DWORD PTR _x8$[ebp]
	subss	xmm0, DWORD PTR _x9$[ebp]
	movss	DWORD PTR _x7$[ebp], xmm0

; 246  :         x8 = x9 - x10;

	movss	xmm0, DWORD PTR _x9$[ebp]
	subss	xmm0, DWORD PTR _x10$[ebp]
	movss	DWORD PTR _x8$[ebp], xmm0

; 247  :         x9 = x10 - x1;

	movss	xmm0, DWORD PTR _x10$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x9$[ebp], xmm0

; 248  :         x10 = x1 - x2;

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR _x10$[ebp], xmm0

; 249  :     }

	jmp	$LN2@minus_for_
$LN3@minus_for_:

; 250  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 251  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 252  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 253  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_for_float@@YAHMMMMMMMMMM@Z ENDP			; minus_for_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_for_long@@YAHJJJJJJJJJJ@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?minus_for_long@@YAHJJJJJJJJJJ@Z PROC			; minus_for_long, COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 215  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 216  :     for (int i = 0; i < N_minus; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@minus_for_
$LN2@minus_for_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@minus_for_:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@minus_for_

; 217  :     {
; 218  :         x1 = x2 - x3;

	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 219  :         x2 = x3 - x4;

	mov	eax, DWORD PTR _x3$[ebp]
	sub	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 220  :         x3 = x4 - x5;

	mov	eax, DWORD PTR _x4$[ebp]
	sub	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 221  :         x4 = x5 - x6;

	mov	eax, DWORD PTR _x5$[ebp]
	sub	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 222  :         x5 = x6 - x7;

	mov	eax, DWORD PTR _x6$[ebp]
	sub	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 223  :         x6 = x7 - x8;

	mov	eax, DWORD PTR _x7$[ebp]
	sub	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 224  :         x7 = x8 - x9;

	mov	eax, DWORD PTR _x8$[ebp]
	sub	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 225  :         x8 = x9 - x10;

	mov	eax, DWORD PTR _x9$[ebp]
	sub	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 226  :         x9 = x10 - x1;

	mov	eax, DWORD PTR _x10$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 227  :         x10 = x1 - x2;

	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 228  :     }

	jmp	SHORT $LN2@minus_for_
$LN3@minus_for_:

; 229  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 230  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 231  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 232  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_for_long@@YAHJJJJJJJJJJ@Z ENDP			; minus_for_long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_for_double@@YAHNNNNNNNNNN@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 8
_x2$ = 16						; size = 8
_x3$ = 24						; size = 8
_x4$ = 32						; size = 8
_x5$ = 40						; size = 8
_x6$ = 48						; size = 8
_x7$ = 56						; size = 8
_x8$ = 64						; size = 8
_x9$ = 72						; size = 8
_x10$ = 80						; size = 8
?minus_for_double@@YAHNNNNNNNNNN@Z PROC			; minus_for_double, COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 194  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 195  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@minus_for_
$LN2@minus_for_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@minus_for_:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@minus_for_

; 196  :     {
; 197  :         x1 = x2 - x3;

	movsd	xmm0, QWORD PTR _x2$[ebp]
	subsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR _x1$[ebp], xmm0

; 198  :         x2 = x3 - x4;

	movsd	xmm0, QWORD PTR _x3$[ebp]
	subsd	xmm0, QWORD PTR _x4$[ebp]
	movsd	QWORD PTR _x2$[ebp], xmm0

; 199  :         x3 = x4 - x5;

	movsd	xmm0, QWORD PTR _x4$[ebp]
	subsd	xmm0, QWORD PTR _x5$[ebp]
	movsd	QWORD PTR _x3$[ebp], xmm0

; 200  :         x4 = x5 - x6;

	movsd	xmm0, QWORD PTR _x5$[ebp]
	subsd	xmm0, QWORD PTR _x6$[ebp]
	movsd	QWORD PTR _x4$[ebp], xmm0

; 201  :         x5 = x6 - x7;

	movsd	xmm0, QWORD PTR _x6$[ebp]
	subsd	xmm0, QWORD PTR _x7$[ebp]
	movsd	QWORD PTR _x5$[ebp], xmm0

; 202  :         x6 = x7 - x8;

	movsd	xmm0, QWORD PTR _x7$[ebp]
	subsd	xmm0, QWORD PTR _x8$[ebp]
	movsd	QWORD PTR _x6$[ebp], xmm0

; 203  :         x7 = x8 - x9;

	movsd	xmm0, QWORD PTR _x8$[ebp]
	subsd	xmm0, QWORD PTR _x9$[ebp]
	movsd	QWORD PTR _x7$[ebp], xmm0

; 204  :         x8 = x9 - x10;

	movsd	xmm0, QWORD PTR _x9$[ebp]
	subsd	xmm0, QWORD PTR _x10$[ebp]
	movsd	QWORD PTR _x8$[ebp], xmm0

; 205  :         x9 = x10 - x1;

	movsd	xmm0, QWORD PTR _x10$[ebp]
	subsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR _x9$[ebp], xmm0

; 206  :         x10 = x1 - x2;

	movsd	xmm0, QWORD PTR _x1$[ebp]
	subsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR _x10$[ebp], xmm0

; 207  :     }

	jmp	$LN2@minus_for_
$LN3@minus_for_:

; 208  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 209  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 210  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 211  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_for_double@@YAHNNNNNNNNNN@Z ENDP			; minus_for_double
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?minus_for_int@@YAHHHHHHHHHHH@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?minus_for_int@@YAHHHHHHHHHHH@Z PROC			; minus_for_int, COMDAT

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 173  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 174  :     for (int i = 0; i < N_minus; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@minus_for_
$LN2@minus_for_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@minus_for_:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@minus_for_

; 175  :     {
; 176  :         x1 = x2 - x3;

	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 177  :         x2 = x3 - x4;

	mov	eax, DWORD PTR _x3$[ebp]
	sub	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 178  :         x3 = x4 - x5;

	mov	eax, DWORD PTR _x4$[ebp]
	sub	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 179  :         x4 = x5 - x6;

	mov	eax, DWORD PTR _x5$[ebp]
	sub	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 180  :         x5 = x6 - x7;

	mov	eax, DWORD PTR _x6$[ebp]
	sub	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 181  :         x6 = x7 - x8;

	mov	eax, DWORD PTR _x7$[ebp]
	sub	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 182  :         x7 = x8 - x9;

	mov	eax, DWORD PTR _x8$[ebp]
	sub	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 183  :         x8 = x9 - x10;

	mov	eax, DWORD PTR _x9$[ebp]
	sub	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 184  :         x9 = x10 - x1;

	mov	eax, DWORD PTR _x10$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 185  :         x10 = x1 - x2;

	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 186  :     }

	jmp	SHORT $LN2@minus_for_
$LN3@minus_for_:

; 187  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 188  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 189  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?minus_for_int@@YAHHHHHHHHHHH@Z ENDP			; minus_for_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_for_char@@YAHDDDDDDDDDD@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 1
_x2$ = 12						; size = 1
_x3$ = 16						; size = 1
_x4$ = 20						; size = 1
_x5$ = 24						; size = 1
_x6$ = 28						; size = 1
_x7$ = 32						; size = 1
_x8$ = 36						; size = 1
_x9$ = 40						; size = 1
_x10$ = 44						; size = 1
?plus_for_char@@YAHDDDDDDDDDD@Z PROC			; plus_for_char, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 151  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 152  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@plus_for_c
$LN2@plus_for_c:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@plus_for_c:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@plus_for_c

; 153  :     {
; 154  :         x1 = x2 + x3;

	movsx	eax, BYTE PTR _x2$[ebp]
	movsx	ecx, BYTE PTR _x3$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x1$[ebp], al

; 155  :         x2 = x3 + x4;

	movsx	eax, BYTE PTR _x3$[ebp]
	movsx	ecx, BYTE PTR _x4$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x2$[ebp], al

; 156  :         x3 = x4 + x5;

	movsx	eax, BYTE PTR _x4$[ebp]
	movsx	ecx, BYTE PTR _x5$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x3$[ebp], al

; 157  :         x4 = x5 + x6;

	movsx	eax, BYTE PTR _x5$[ebp]
	movsx	ecx, BYTE PTR _x6$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x4$[ebp], al

; 158  :         x5 = x6 + x7;

	movsx	eax, BYTE PTR _x6$[ebp]
	movsx	ecx, BYTE PTR _x7$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x5$[ebp], al

; 159  :         x6 = x7 + x8;

	movsx	eax, BYTE PTR _x7$[ebp]
	movsx	ecx, BYTE PTR _x8$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x6$[ebp], al

; 160  :         x7 = x8 + x9;

	movsx	eax, BYTE PTR _x8$[ebp]
	movsx	ecx, BYTE PTR _x9$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x7$[ebp], al

; 161  :         x8 = x9 + x10;

	movsx	eax, BYTE PTR _x9$[ebp]
	movsx	ecx, BYTE PTR _x10$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x8$[ebp], al

; 162  :         x9 = x10 + x1;

	movsx	eax, BYTE PTR _x10$[ebp]
	movsx	ecx, BYTE PTR _x1$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x9$[ebp], al

; 163  :         x10 = x1 + x2;

	movsx	eax, BYTE PTR _x1$[ebp]
	movsx	ecx, BYTE PTR _x2$[ebp]
	add	eax, ecx
	mov	BYTE PTR _x10$[ebp], al

; 164  :     }

	jmp	$LN2@plus_for_c
$LN3@plus_for_c:

; 165  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 166  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 167  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_for_char@@YAHDDDDDDDDDD@Z ENDP			; plus_for_char
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_for_float@@YAHMMMMMMMMMM@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?plus_for_float@@YAHMMMMMMMMMM@Z PROC			; plus_for_float, COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 130  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 131  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@plus_for_f
$LN2@plus_for_f:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@plus_for_f:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@plus_for_f

; 132  :     {
; 133  :         x1 = x2 + x3;

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _x3$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 134  :         x2 = x3 + x4;

	movss	xmm0, DWORD PTR _x3$[ebp]
	addss	xmm0, DWORD PTR _x4$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 135  :         x3 = x4 + x5;

	movss	xmm0, DWORD PTR _x4$[ebp]
	addss	xmm0, DWORD PTR _x5$[ebp]
	movss	DWORD PTR _x3$[ebp], xmm0

; 136  :         x4 = x5 + x6;

	movss	xmm0, DWORD PTR _x5$[ebp]
	addss	xmm0, DWORD PTR _x6$[ebp]
	movss	DWORD PTR _x4$[ebp], xmm0

; 137  :         x5 = x6 + x7;

	movss	xmm0, DWORD PTR _x6$[ebp]
	addss	xmm0, DWORD PTR _x7$[ebp]
	movss	DWORD PTR _x5$[ebp], xmm0

; 138  :         x6 = x7 + x8;

	movss	xmm0, DWORD PTR _x7$[ebp]
	addss	xmm0, DWORD PTR _x8$[ebp]
	movss	DWORD PTR _x6$[ebp], xmm0

; 139  :         x7 = x8 + x9;

	movss	xmm0, DWORD PTR _x8$[ebp]
	addss	xmm0, DWORD PTR _x9$[ebp]
	movss	DWORD PTR _x7$[ebp], xmm0

; 140  :         x8 = x9 + x10;

	movss	xmm0, DWORD PTR _x9$[ebp]
	addss	xmm0, DWORD PTR _x10$[ebp]
	movss	DWORD PTR _x8$[ebp], xmm0

; 141  :         x9 = x10 + x1;

	movss	xmm0, DWORD PTR _x10$[ebp]
	addss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x9$[ebp], xmm0

; 142  :         x10 = x1 + x2;

	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR _x10$[ebp], xmm0

; 143  :     }

	jmp	$LN2@plus_for_f
$LN3@plus_for_f:

; 144  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 145  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 146  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_for_float@@YAHMMMMMMMMMM@Z ENDP			; plus_for_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_for_long@@YAHJJJJJJJJJJ@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?plus_for_long@@YAHJJJJJJJJJJ@Z PROC			; plus_for_long, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 109  :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 110  :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@plus_for_l
$LN2@plus_for_l:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@plus_for_l:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	SHORT $LN3@plus_for_l

; 111  :     {
; 112  :         x1 = x2 + x3;

	mov	eax, DWORD PTR _x2$[ebp]
	add	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 113  :         x2 = x3 + x4;

	mov	eax, DWORD PTR _x3$[ebp]
	add	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 114  :         x3 = x4 + x5;

	mov	eax, DWORD PTR _x4$[ebp]
	add	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 115  :         x4 = x5 + x6;

	mov	eax, DWORD PTR _x5$[ebp]
	add	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 116  :         x5 = x6 + x7;

	mov	eax, DWORD PTR _x6$[ebp]
	add	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 117  :         x6 = x7 + x8;

	mov	eax, DWORD PTR _x7$[ebp]
	add	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 118  :         x7 = x8 + x9;

	mov	eax, DWORD PTR _x8$[ebp]
	add	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 119  :         x8 = x9 + x10;

	mov	eax, DWORD PTR _x9$[ebp]
	add	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 120  :         x9 = x10 + x1;

	mov	eax, DWORD PTR _x10$[ebp]
	add	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 121  :         x10 = x1 + x2;

	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 122  :     }

	jmp	SHORT $LN2@plus_for_l
$LN3@plus_for_l:

; 123  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 124  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 125  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_for_long@@YAHJJJJJJJJJJ@Z ENDP			; plus_for_long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_for_double@@YAHNNNNNNNNNN@Z
_TEXT	SEGMENT
_time$ = -44						; size = 4
_end_time$ = -32					; size = 4
_i$1 = -20						; size = 4
_start_time$ = -8					; size = 4
_x1$ = 8						; size = 8
_x2$ = 16						; size = 8
_x3$ = 24						; size = 8
_x4$ = 32						; size = 8
_x5$ = 40						; size = 8
_x6$ = 48						; size = 8
_x7$ = 56						; size = 8
_x8$ = 64						; size = 8
_x9$ = 72						; size = 8
_x10$ = 80						; size = 8
?plus_for_double@@YAHNNNNNNNNNN@Z PROC			; plus_for_double, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 88   :     int start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 89   :     for (int i = 0; i < N_standart; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@plus_for_d
$LN2@plus_for_d:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@plus_for_d:
	cmp	DWORD PTR _i$1[ebp], 100000		; 000186a0H
	jge	$LN3@plus_for_d

; 90   :     {
; 91   :         x1 = x2 + x3;

	movsd	xmm0, QWORD PTR _x2$[ebp]
	addsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR _x1$[ebp], xmm0

; 92   :         x2 = x3 + x4;

	movsd	xmm0, QWORD PTR _x3$[ebp]
	addsd	xmm0, QWORD PTR _x4$[ebp]
	movsd	QWORD PTR _x2$[ebp], xmm0

; 93   :         x3 = x4 + x5;

	movsd	xmm0, QWORD PTR _x4$[ebp]
	addsd	xmm0, QWORD PTR _x5$[ebp]
	movsd	QWORD PTR _x3$[ebp], xmm0

; 94   :         x4 = x5 + x6;

	movsd	xmm0, QWORD PTR _x5$[ebp]
	addsd	xmm0, QWORD PTR _x6$[ebp]
	movsd	QWORD PTR _x4$[ebp], xmm0

; 95   :         x5 = x6 + x7;

	movsd	xmm0, QWORD PTR _x6$[ebp]
	addsd	xmm0, QWORD PTR _x7$[ebp]
	movsd	QWORD PTR _x5$[ebp], xmm0

; 96   :         x6 = x7 + x8;

	movsd	xmm0, QWORD PTR _x7$[ebp]
	addsd	xmm0, QWORD PTR _x8$[ebp]
	movsd	QWORD PTR _x6$[ebp], xmm0

; 97   :         x7 = x8 + x9;

	movsd	xmm0, QWORD PTR _x8$[ebp]
	addsd	xmm0, QWORD PTR _x9$[ebp]
	movsd	QWORD PTR _x7$[ebp], xmm0

; 98   :         x8 = x9 + x10;

	movsd	xmm0, QWORD PTR _x9$[ebp]
	addsd	xmm0, QWORD PTR _x10$[ebp]
	movsd	QWORD PTR _x8$[ebp], xmm0

; 99   :         x9 = x10 + x1;

	movsd	xmm0, QWORD PTR _x10$[ebp]
	addsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR _x9$[ebp], xmm0

; 100  :         x10 = x1 + x2;

	movsd	xmm0, QWORD PTR _x1$[ebp]
	addsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR _x10$[ebp], xmm0

; 101  :     }

	jmp	$LN2@plus_for_d
$LN3@plus_for_d:

; 102  :     int end_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end_time$[ebp], eax

; 103  :     int time = end_time - start_time;

	mov	eax, DWORD PTR _end_time$[ebp]
	sub	eax, DWORD PTR _start_time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 104  :     return time;

	mov	eax, DWORD PTR _time$[ebp]

; 105  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_for_double@@YAHNNNNNNNNNN@Z ENDP			; plus_for_double
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?plus_for_int@@YA_KHHHHHHHHHH@Z
_TEXT	SEGMENT
_i$1 = -24						; size = 4
_start$ = -12						; size = 8
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_x5$ = 24						; size = 4
_x6$ = 28						; size = 4
_x7$ = 32						; size = 4
_x8$ = 36						; size = 4
_x9$ = 40						; size = 4
_x10$ = 44						; size = 4
?plus_for_int@@YA_KHHHHHHHHHH@Z PROC			; plus_for_int, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 69   :     uint64_t start = get_clock();

	call	?get_clock@@YA_KXZ			; get_clock
	mov	DWORD PTR _start$[ebp], eax
	mov	DWORD PTR _start$[ebp+4], edx

; 70   :     for (int i = 0; i < N_plus; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@plus_for_i
$LN2@plus_for_i:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@plus_for_i:
	cmp	DWORD PTR _i$1[ebp], 1000000		; 000f4240H
	jge	SHORT $LN3@plus_for_i

; 71   :     {
; 72   :         x1 = x2 + x3;

	mov	eax, DWORD PTR _x2$[ebp]
	add	eax, DWORD PTR _x3$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 73   :         x2 = x3 + x4;

	mov	eax, DWORD PTR _x3$[ebp]
	add	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR _x2$[ebp], eax

; 74   :         x3 = x4 + x5;

	mov	eax, DWORD PTR _x4$[ebp]
	add	eax, DWORD PTR _x5$[ebp]
	mov	DWORD PTR _x3$[ebp], eax

; 75   :         x4 = x5 + x6;

	mov	eax, DWORD PTR _x5$[ebp]
	add	eax, DWORD PTR _x6$[ebp]
	mov	DWORD PTR _x4$[ebp], eax

; 76   :         x5 = x6 + x7;

	mov	eax, DWORD PTR _x6$[ebp]
	add	eax, DWORD PTR _x7$[ebp]
	mov	DWORD PTR _x5$[ebp], eax

; 77   :         x6 = x7 + x8;

	mov	eax, DWORD PTR _x7$[ebp]
	add	eax, DWORD PTR _x8$[ebp]
	mov	DWORD PTR _x6$[ebp], eax

; 78   :         x7 = x8 + x9;

	mov	eax, DWORD PTR _x8$[ebp]
	add	eax, DWORD PTR _x9$[ebp]
	mov	DWORD PTR _x7$[ebp], eax

; 79   :         x8 = x9 + x10;

	mov	eax, DWORD PTR _x9$[ebp]
	add	eax, DWORD PTR _x10$[ebp]
	mov	DWORD PTR _x8$[ebp], eax

; 80   :         x9 = x10 + x1;

	mov	eax, DWORD PTR _x10$[ebp]
	add	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x9$[ebp], eax

; 81   :         x10 = x1 + x2;

	mov	eax, DWORD PTR _x1$[ebp]
	add	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x10$[ebp], eax

; 82   :     }

	jmp	SHORT $LN2@plus_for_i
$LN3@plus_for_i:

; 83   :     return get_clock() - start;

	call	?get_clock@@YA_KXZ			; get_clock
	sub	eax, DWORD PTR _start$[ebp]
	sbb	edx, DWORD PTR _start$[ebp+4]

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plus_for_int@@YA_KHHHHHHHHHH@Z ENDP			; plus_for_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 982  :     _Ostr.put(_Ostr.widen('\n'));

	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 983  :     _Ostr.flush();

	mov	esi, esp
	mov	ecx, DWORD PTR __Ostr$[ebp]
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 984  :     return _Ostr;

	mov	eax, DWORD PTR __Ostr$[ebp]

; 985  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 735  :     const char* _Val) { // insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 736  :     using _Elem = char;
; 737  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 738  : 
; 739  :     ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 740  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 741  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv329[ebp], eax
	mov	DWORD PTR tv329[ebp+4], edx
	cmp	DWORD PTR tv329[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv329[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv343[ebp], eax
	mov	DWORD PTR tv343[ebp+4], edx
	mov	eax, DWORD PTR tv343[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv343[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 742  :     const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 743  : 
; 744  :     if (!_Ok) {

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator

; 745  :         _State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 746  :     } else { // state okay, insert

	jmp	$LN9@operator
$LN8@operator:

; 747  :         _TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 748  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator

; 749  :             for (; 0 < _Pad; --_Pad) { // pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN26@operator:

; 750  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv284[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv285[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv284[ebp]
	push	eax
	mov	ecx, DWORD PTR tv285[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv286[ebp], eax
	mov	ecx, DWORD PTR tv286[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator

; 751  :                     _State |= ios_base::badbit; // insertion failed, quit

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 752  :                     break;

	jmp	SHORT $LN11@operator
$LN12@operator:

; 753  :                 }
; 754  :             }

	jmp	$LN2@operator
$LN11@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN13@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN13@operator
$LN27@operator:

; 758  :             _State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN13@operator:

; 759  :         }
; 760  : 
; 761  :         if (_State == ios_base::goodbit) {

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN14@operator

; 762  :             for (; 0 < _Pad; --_Pad) { // pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN14@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN14@operator
$LN28@operator:

; 763  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@operator

; 764  :                     _State |= ios_base::badbit; // insertion failed, quit

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 765  :                     break;

	jmp	SHORT $LN14@operator
$LN15@operator:

; 766  :                 }
; 767  :             }

	jmp	$LN5@operator
$LN14@operator:

; 768  :         }
; 769  : 
; 770  :         _Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 771  :         _CATCH_IO_(ios_base, _Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN9@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 772  :     }
; 773  : 
; 774  :     _Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 775  :     return _Ostr;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]

; 776  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@operator:
	DD	1
	DD	$LN31@operator
$LN31@operator:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN29@operator
$LN29@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv280 = -352						; size = 4
tv275 = -352						; size = 4
tv314 = -348						; size = 8
tv279 = -348						; size = 4
tv277 = -348						; size = 4
tv274 = -348						; size = 4
tv276 = -344						; size = 4
tv65 = -344						; size = 4
tv278 = -341						; size = 1
tv273 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ecx, OFFSET __1D745195_ostream
	call	@__CheckForDebuggerJustMyCode@4

; 781  :     using _Elem = char;
; 782  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 783  : 
; 784  :     ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 785  :     const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 786  : 
; 787  :     if (_Ok) { // state okay, insert

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN8@operator

; 788  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv314[ebp], eax
	mov	DWORD PTR tv314[ebp+4], edx
	cmp	DWORD PTR tv314[ebp+4], 0
	jg	SHORT $LN15@operator
	jl	SHORT $LN22@operator
	cmp	DWORD PTR tv314[ebp], 1
	ja	SHORT $LN15@operator
$LN22@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN16@operator
$LN15@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR tv128[ebp], eax
	mov	DWORD PTR tv128[ebp+4], edx
$LN16@operator:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR __Pad$9[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp+4]
	mov	DWORD PTR __Pad$9[ebp+4], ecx

; 789  : 
; 790  :         _TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 791  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN10@operator

; 792  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	eax, DWORD PTR __Pad$9[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$9[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$9[ebp], eax
	mov	DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN10@operator
	cmp	DWORD PTR __Pad$9[ebp+4], 0
	jl	$LN10@operator
	jg	SHORT $LN23@operator
	cmp	DWORD PTR __Pad$9[ebp], 0
	jbe	$LN10@operator
$LN23@operator:

; 793  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv273[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv274[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv273[ebp]
	push	eax
	mov	ecx, DWORD PTR tv274[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv275[ebp], eax
	mov	ecx, DWORD PTR tv275[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T7[ebp], eax
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@operator

; 794  :                     _State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN11@operator:

; 795  :                 }
; 796  :             }

	jmp	$LN2@operator
$LN10@operator:

; 797  :         }
; 798  : 
; 799  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN12@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv276[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv276[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv277[ebp], eax
	mov	ecx, DWORD PTR tv277[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator

; 800  :             _State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN12@operator:

; 801  :         }
; 802  : 
; 803  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$9[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$9[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$9[ebp], eax
	mov	DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN6@operator
	cmp	DWORD PTR __Pad$9[ebp+4], 0
	jl	$LN6@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR __Pad$9[ebp], 0
	jbe	$LN6@operator
$LN24@operator:

; 804  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv278[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv279[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv278[ebp]
	push	eax
	mov	ecx, DWORD PTR tv279[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv280[ebp], eax
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@operator

; 805  :                 _State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN13@operator:

; 806  :             }
; 807  :         }

	jmp	$LN5@operator
$LN6@operator:
	jmp	SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 808  :         _CATCH_IO_(ios_base, _Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, $LN21@operator
	ret	0
$LN17@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN8@operator
$LN21@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 809  :     }
; 810  : 
; 811  :     _Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 812  :     _Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 813  :     return _Ostr;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]

; 814  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN28@operator:
	DD	1
	DD	$LN27@operator
$LN27@operator:
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN25@operator
$LN25@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?init_clock@@YAXXZ
_TEXT	SEGMENT
_tsc$ = -24						; size = 8
_start$ = -8						; size = 4
?init_clock@@YAXXZ PROC					; init_clock, COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 54   :     clock_t start;
; 55   :     unsigned __int64 tsc;
; 56   : 
; 57   :     start = wait_clock_update();

	call	?wait_clock_update@@YAJXZ		; wait_clock_update
	mov	DWORD PTR _start$[ebp], eax

; 58   :     tsc = __rdtsc();

	rdtsc
	mov	DWORD PTR _tsc$[ebp], eax
	mov	DWORD PTR _tsc$[ebp+4], edx

; 59   :     start = wait_clock_update() - start;

	call	?wait_clock_update@@YAJXZ		; wait_clock_update
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 60   :     tsc = __rdtsc() - tsc;

	rdtsc
	sub	eax, DWORD PTR _tsc$[ebp]
	sbb	edx, DWORD PTR _tsc$[ebp+4]
	mov	DWORD PTR _tsc$[ebp], eax
	mov	DWORD PTR _tsc$[ebp+4], edx

; 61   :     tick_per_second = tsc / start * CLOCKS_PER_SEC;

	mov	eax, DWORD PTR _start$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _tsc$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tsc$[ebp]
	push	ecx
	call	__aulldiv
	push	0
	push	1000					; 000003e8H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR ?tick_per_second@@3KA, eax	; tick_per_second

; 62   :     cout << "CPU TSC ticks per second: " << tick_per_second << endl;

	mov	esi, esp
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	edi, esp
	mov	eax, DWORD PTR ?tick_per_second@@3KA	; tick_per_second
	push	eax
	push	OFFSET ??_C@_0BL@NKPJCMOH@CPU?5TSC?5ticks?5per?5second?3?5@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init_clock@@YAXXZ ENDP					; init_clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?wait_clock_update@@YAJXZ
_TEXT	SEGMENT
_tmp$ = -20						; size = 4
_start$ = -8						; size = 4
?wait_clock_update@@YAJXZ PROC				; wait_clock_update, COMDAT

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 41   :     clock_t start = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start$[ebp], eax
$LN4@wait_clock:

; 42   :     clock_t tmp;
; 43   :     do
; 44   :     {
; 45   :         tmp = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 46   :     } while (tmp == start);

	mov	eax, DWORD PTR _tmp$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	je	SHORT $LN4@wait_clock

; 47   :     return tmp;

	mov	eax, DWORD PTR _tmp$[ebp]

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?wait_clock_update@@YAJXZ ENDP				; wait_clock_update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?get_clock@@YA_KXZ
_TEXT	SEGMENT
?get_clock@@YA_KXZ PROC					; get_clock, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 36   :     return __rdtsc();

	rdtsc

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_clock@@YA_KXZ ENDP					; get_clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 400  :     _NODISCARD static constexpr int_type eof() noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __D15AFF60_xstring
	call	@__CheckForDebuggerJustMyCode@4

; 401  :         return static_cast<int_type>(EOF);

	or	eax, -1

; 402  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 392  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __D15AFF60_xstring
	call	@__CheckForDebuggerJustMyCode@4

; 393  :         return _Left == _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]

; 394  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 305  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __D15AFF60_xstring
	call	@__CheckForDebuggerJustMyCode@4

; 306  :         // find length of null-terminated string
; 307  : #if _HAS_CXX17
; 308  : #ifdef __cpp_char8_t
; 309  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 310  : #if _HAS_U8_INTRINSICS
; 311  :             return __builtin_u8strlen(_First);
; 312  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 313  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 314  : #endif // _HAS_U8_INTRINSICS
; 315  :         } else
; 316  : #endif // __cpp_char8_t
; 317  :         {
; 318  :             return __builtin_strlen(_First);
; 319  :         }
; 320  : #else // _HAS_CXX17
; 321  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 322  : #endif // _HAS_CXX17
; 323  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\koka5\OneDrive\Documents\GitHub\AOS-Lab-1\labAOS\labAOS.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A639F09B_labAOS@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
